<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" expiry="2018-07-15" version="30" packageVersion="1" saxonVersion="9.8.0.12" target="JS" targetVersion="1" relocatable="true">
 <co id="0" binds="">
  <template name="Q{}getDataRef" flags="os" line="3229" module="saxon-xforms.xsl" slots="3">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3230">
    <param name="Q{}this" slot="0" flags="r" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3231" name="Q{}nodeset" slot="1" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
      <check card="1" diag="8|0|XTTE0590|nodeset">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="3232" name="Q{}bindingi" slot="2" as="node()?">
     <empty role="select"/>
     <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|bindingi">
      <check card="?" diag="8|0|XTTE0590|bindingi">
       <supplied slot="2"/>
      </check>
     </treat>
    </param>
    <choose line="3235">
     <fn name="exists">
      <slash simple="1">
       <varRef name="this" slot="0"/>
       <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
      </slash>
     </fn>
     <valueOf line="3242">
      <choose>
       <fn name="not">
        <varRef name="nodeset" slot="1"/>
       </fn>
       <fn name="concat">
        <varRef name="nodeset" slot="1"/>
        <data>
         <slash simple="1">
          <varRef name="this" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </slash>
        </data>
       </fn>
       <true/>
       <fn name="concat">
        <varRef name="nodeset" slot="1"/>
        <str val="/"/>
        <data>
         <slash simple="1">
          <varRef name="this" slot="0"/>
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </slash>
        </data>
       </fn>
      </choose>
     </valueOf>
     <fn line="3244" name="exists">
      <varRef name="bindingi" slot="2"/>
     </fn>
     <valueOf line="3251">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <choose>
         <fn name="exists">
          <slash simple="1">
           <varRef name="bindingi" slot="2"/>
           <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
          </slash>
         </fn>
         <data>
          <slash simple="1">
           <varRef name="bindingi" slot="2"/>
           <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
          </slash>
         </data>
         <true/>
         <data>
          <slash simple="1">
           <varRef name="bindingi" slot="2"/>
           <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
          </slash>
         </data>
        </choose>
       </convert>
       <str val=" "/>
      </fn>
     </valueOf>
     <true/>
     <valueOf line="3254" flags="S">
      <str val=""/>
     </valueOf>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="1" binds="">
  <mode name="Q{}xforms-action" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="1" flags="s" line="2500" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}insert)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2501">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2503" name="insert" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2506" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2507" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2510" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2515">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2518" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2519" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2522" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2528">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2530" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2533">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2535" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2538">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2540" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2543">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2545" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="0" minImp="0" slots="1" flags="s" line="2667" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}reset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2668">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2670" name="reset" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2673" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2674" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2677" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2682">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2685" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2686" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2689" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2695">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2697" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2700">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2702" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2705">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2707" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2710">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2712" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2715">
        <fn name="exists">
         <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
        </fn>
        <elem line="2717" name="event" nsuri="" flags="l">
         <valueOf flags="l">
          <fn name="string-join">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </data>
           </convert>
           <str val=" "/>
          </fn>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="0" minImp="0" slots="1" flags="s" line="2602" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setvalue)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2603">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <message line="2604">
      <sequence role="select">
       <valueOf>
        <str val="setvalue ZZZ= "/>
       </valueOf>
       <valueOf line="2605">
        <fn name="serialize">
         <dot type="element(Q{http://www.w3.org/2002/xforms}setvalue)"/>
        </fn>
       </valueOf>
      </sequence>
      <str role="terminate" val="no"/>
      <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
     </message>
     <elem line="2607" name="setvalue" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
        </fn>
        <att line="2609" name="value" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}value" chk="0"/>
            </convert>
           </fn>
          </cast>
         </convert>
        </att>
       </choose>
       <choose line="2612">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2615" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2616" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2619" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2624">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2627" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2628" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2631" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2637">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2639" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2642">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2644" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2647">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2649" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2652">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2654" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2658">
        <fn name="exists">
         <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
        </fn>
        <elem line="2660" name="value" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <dot type="element(Q{http://www.w3.org/2002/xforms}setvalue)"/>
           </data>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="1" rank="0" minImp="0" slots="1" flags="s" line="2551" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}delete)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2552">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2554" name="delete" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2557" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2558" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2561" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2566">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2569" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2570" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2573" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2579">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2581" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2584">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2586" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2589">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2591" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2594">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2596" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="2" binds="3 4">
  <template name="Q{}getItemForBinding" flags="os" line="3259" module="saxon-xforms.xsl" slots="4">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3260">
    <param name="Q{}bindingi" slot="0" as="node()?">
     <empty role="select"/>
     <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|bindingi">
      <check card="?" diag="8|0|XTTE0590|bindingi">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3261" name="Q{}instances" slot="1" flags="t" as="element()*">
     <empty role="select"/>
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|instances">
      <supplied slot="1"/>
     </treat>
    </param>
    <choose line="3263">
     <and op="and">
      <fn name="exists">
       <varRef name="bindingi" slot="0"/>
      </fn>
      <fn name="exists">
       <slash simple="1">
        <varRef name="bindingi" slot="0"/>
        <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       </slash>
      </fn>
     </and>
     <let line="3264" var="instance-map" as="map(xs:string, xs:string)" slot="2" eval="7">
      <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="0" eval="4">
       <check card="1" diag="0|0||xforms:getInstanceMap">
        <cvUntyped to="xs:string">
         <data>
          <slash simple="1">
           <varRef name="bindingi" slot="0"/>
           <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
          </slash>
         </data>
        </cvUntyped>
       </check>
      </ufCall>
      <let line="3268" var="this-instance" as="element()?" slot="3" eval="9">
       <callT line="3269" name="getInstance" bSlot="1">
        <withParam name="Q{}instance-id" flags="c" as="xs:string">
         <check line="3270" card="1" diag="8|0|XTTE0590|instance-id">
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="instance-map" slot="2"/>
           <str val="instance-id"/>
          </ifCall>
         </check>
        </withParam>
       </callT>
       <evaluate line="3276" dxns="">
        <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <varRef name="instance-map" slot="2"/>
          <str val="xpath"/>
         </ifCall>
        </check>
        <varRef role="cxt" name="this-instance" slot="3"/>
        <str role="sa" val="no"/>
        <map role="wp" size="0"/>
       </evaluate>
      </let>
     </let>
     <true/>
     <slash line="3281" simple="1">
      <first>
       <varRef name="instances" slot="1"/>
      </first>
      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="5" binds="">
  <mode name="Q{}xforms-action-map" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="2" flags="s" line="2729" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="Q{http://www.w3.org/2002/xforms}*" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.uri==='http://www.w3.org/2002/xforms'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2730">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <ifCall line="2731" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
      <fn name="local-name">
       <dot type="Q{http://www.w3.org/2002/xforms}*"/>
      </fn>
      <let line="2733" var="array" as="map(xs:string, xs:string)*" slot="1" eval="8">
       <forEach line="2734">
        <currentGroup/>
        <ifCall line="2738" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
         <sequence>
          <choose>
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
            </slash>
           </fn>
           <ifCall line="2739" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@value"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2742">
           <and op="and">
            <fn name="empty">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
             </slash>
            </fn>
            <fn name="exists">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
               <dot/>
              </treat>
              <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
             </slash>
            </fn>
           </and>
           <ifCall line="2743" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="value"/>
            <fn name="string">
             <dot/>
            </fn>
           </ifCall>
          </choose>
          <choose line="2746">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
            </slash>
           </fn>
           <ifCall line="2747" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="ref"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2750">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
            </slash>
           </fn>
           <ifCall line="2751" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="ref"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2754">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </slash>
           </fn>
           <ifCall line="2755" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="position"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2759">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </slash>
           </fn>
           <ifCall line="2760" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="at"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2763">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </slash>
           </fn>
           <ifCall line="2764" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="if"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2767">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </slash>
           </fn>
           <ifCall line="2768" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="while"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2772">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </slash>
           </fn>
           <ifCall line="2773" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="event"/>
            <fn name="string">
             <check card="?" diag="0|0||fn:string">
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                <dot/>
               </treat>
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </slash>
             </check>
            </fn>
           </ifCall>
          </choose>
         </sequence>
         <map size="2">
          <str val="duplicates"/>
          <str val="reject"/>
          <str val="duplicates-error-code"/>
          <str val="XTDE3365"/>
         </map>
        </ifCall>
       </forEach>
       <ifCall line="2780" name="Q{http://www.w3.org/2005/xpath-functions/array}_from-sequence" type="array(*)">
        <varRef name="array" slot="1"/>
       </ifCall>
      </let>
     </ifCall>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="6" binds="7">
  <mode name="Q{}form-check-initial" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="1" flags="s" line="2931" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2932">
     <param name="Q{}pendingUpdates" slot="0" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <copy line="2938" flags="cin">
      <applyT role="content" mode="Q{}form-check" bSlot="0">
       <dot role="select" type="element()"/>
       <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
        <varRef line="2939" name="pendingUpdates" slot="0"/>
       </withParam>
      </applyT>
     </copy>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="7" binds="7 8 7 7 8">
  <mode name="Q{}form-check" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="10" flags="s" line="2944" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2945">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2946" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <param line="2947" name="Q{}pendingUpdates" slot="2" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="2959" var="updatedPath" as="xs:string" slot="3" eval="7">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="curPath" slot="0"/>
        </atomSing>
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
        <str val="["/>
        <atomSing card="?" diag="0|3||fn:concat">
         <varRef name="position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="curPath" slot="0"/>
        </atomSing>
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </fn>
      </choose>
      <sequence line="2967">
       <applyT mode="Q{}form-check" bSlot="0">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <withParam name="Q{}curPath" as="xs:string">
         <fn line="2968" name="concat">
          <varRef name="updatedPath" slot="3"/>
          <str val="/"/>
         </fn>
        </withParam>
        <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
         <varRef line="2969" name="pendingUpdates" slot="2"/>
        </withParam>
       </applyT>
       <let line="2975" var="associated-form-control" as="node()*" slot="4" eval="8">
        <slash>
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
         <fn name="key">
          <str val="Q{http://saxon.sf.net/}kk101"/>
          <varRef name="updatedPath" slot="3"/>
          <dot type="document-node()"/>
         </fn>
        </slash>
        <sequence line="2978">
         <choose>
          <fn name="exists">
           <varRef name="associated-form-control" slot="4"/>
          </fn>
          <valueOf line="2982">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <applyT mode="Q{}get-field" bSlot="1">
                <varRef role="select" name="associated-form-control" slot="4"/>
               </applyT>
              </mergeAdj>
             </data>
            </convert>
            <str val=""/>
           </fn>
          </valueOf>
          <and line="2985" op="and">
           <fn name="exists">
            <varRef name="pendingUpdates" slot="2"/>
           </fn>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <check card="1" diag="0|0||map:contains">
             <varRef name="pendingUpdates" slot="2"/>
            </check>
            <varRef name="updatedPath" slot="3"/>
           </ifCall>
          </and>
          <valueOf line="2993">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <check card="1" diag="0|0||map:get">
             <varRef name="pendingUpdates" slot="2"/>
            </check>
            <varRef name="updatedPath" slot="3"/>
           </ifCall>
          </valueOf>
          <true/>
          <valueOf line="3003">
           <fn name="normalize-space">
            <fn name="string-join">
             <data>
              <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
             </data>
             <str val=""/>
            </fn>
           </fn>
          </valueOf>
         </choose>
         <forEachGroup line="3010" algorithm="by">
          <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          <fn role="key" name="local-name">
           <dot type="element()"/>
          </fn>
          <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
          <let role="content" line="3012" var="updatedChildPath" as="xs:string" slot="5" eval="8">
           <fn name="concat">
            <varRef name="updatedPath" slot="3"/>
            <str val="/"/>
            <check card="?" diag="0|2||fn:concat">
             <currentGroupingKey/>
            </check>
           </fn>
           <let line="3017" var="vv:v0" as="xs:string" slot="6" eval="13">
            <fn name="concat">
             <varRef name="updatedChildPath" slot="5"/>
             <str val="["/>
            </fn>
            <let var="dataRefWithFilter" as="element()*" slot="7" eval="8">
             <filter flags="b">
              <slash simple="1">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
               <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <fn name="starts-with">
               <cvUntyped to="xs:string">
                <attVal name="Q{}data-ref" chk="0"/>
               </cvUntyped>
               <varRef name="vv:v0" slot="6"/>
              </fn>
             </filter>
             <choose line="3020">
              <or op="or">
               <fn name="exists">
                <tail start="2">
                 <currentGroup/>
                </tail>
               </fn>
               <fn name="exists">
                <varRef name="dataRefWithFilter" slot="7"/>
               </fn>
              </or>
              <let line="3025" var="vv:v1" as="xs:string" slot="8" eval="13">
               <fn name="concat">
                <varRef name="updatedPath" slot="3"/>
                <str val="/"/>
               </fn>
               <forEach line="3022">
                <currentGroup/>
                <copy line="3024" flags="cin">
                 <applyT role="content" mode="Q{}form-check" bSlot="2">
                  <dot role="select"/>
                  <withParam name="Q{}curPath" as="xs:string">
                   <varRef line="3025" name="vv:v1" slot="8"/>
                  </withParam>
                  <withParam name="Q{}position" as="xs:integer">
                   <fn line="3026" name="position"/>
                  </withParam>
                  <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                   <varRef line="3027" name="pendingUpdates" slot="2"/>
                  </withParam>
                 </applyT>
                </copy>
               </forEach>
              </let>
              <true/>
              <let line="3039" var="vv:v2" as="xs:string" slot="9" eval="13">
               <fn name="concat">
                <varRef name="updatedPath" slot="3"/>
                <str val="/"/>
               </fn>
               <forEach line="3036">
                <currentGroup/>
                <copy line="3038" flags="cin">
                 <applyT role="content" mode="Q{}form-check" bSlot="3">
                  <dot role="select"/>
                  <withParam name="Q{}curPath" as="xs:string">
                   <varRef line="3039" name="vv:v2" slot="9"/>
                  </withParam>
                  <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                   <varRef line="3040" name="pendingUpdates" slot="2"/>
                  </withParam>
                 </applyT>
                </copy>
               </forEach>
              </let>
             </choose>
            </let>
           </let>
          </let>
         </forEachGroup>
        </sequence>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="4" flags="s" line="3053" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3054">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="3055" name="Q{}pendingUpdates" slot="1" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <let line="3056" var="updatedPath" as="xs:string" slot="2" eval="8">
      <fn name="concat">
       <atomSing card="?" diag="0|0||fn:concat">
        <varRef name="curPath" slot="0"/>
       </atomSing>
       <str val="@"/>
       <fn name="local-name">
        <dot type="attribute()"/>
       </fn>
      </fn>
      <let line="3065" var="associated-form-control" as="node()*" slot="3" eval="8">
       <slash>
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
        <fn name="key">
         <str val="Q{http://saxon.sf.net/}kk101"/>
         <varRef name="updatedPath" slot="2"/>
         <dot type="document-node()"/>
        </fn>
       </slash>
       <choose line="3068">
        <fn name="exists">
         <varRef name="associated-form-control" slot="3"/>
        </fn>
        <compAtt line="3071">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <fn role="select" line="3073" name="string-join">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <mergeAdj>
             <applyT mode="Q{}get-field" bSlot="4">
              <varRef role="select" name="associated-form-control" slot="3"/>
             </applyT>
            </mergeAdj>
           </data>
          </convert>
          <str val=""/>
         </fn>
        </compAtt>
        <and line="3076" op="and">
         <fn name="exists">
          <varRef name="pendingUpdates" slot="1"/>
         </fn>
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
          <check card="1" diag="0|0||map:contains">
           <varRef name="pendingUpdates" slot="1"/>
          </check>
          <varRef name="updatedPath" slot="2"/>
         </ifCall>
        </and>
        <compAtt line="3077">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <ifCall role="select" line="3078" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <check card="1" diag="0|0||map:get">
           <varRef name="pendingUpdates" slot="1"/>
          </check>
          <varRef name="updatedPath" slot="2"/>
         </ifCall>
        </compAtt>
        <true/>
        <forEach line="3082">
         <dot type="attribute()"/>
         <copy flags="cin">
          <empty role="content"/>
         </copy>
        </forEach>
       </choose>
      </let>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="9" binds="9">
  <mode name="Q{}update-ref" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="2" rank="0" minImp="0" slots="2" flags="s" line="1994" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1995">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1996" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <copy line="1999" flags="cin">
      <applyT role="content" mode="Q{}update-ref" bSlot="0">
       <sequence role="select">
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </sequence>
       <withParam name="Q{}path" as="xs:string">
        <varRef line="2000" name="path" slot="0"/>
       </withParam>
       <withParam name="Q{}position">
        <varRef line="2001" name="position" slot="1"/>
       </withParam>
      </applyT>
     </copy>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="3" flags="s" line="1975" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1976">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1977" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1979" var="path-updated" as="xs:string" slot="2" eval="7">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <varRef name="path" slot="0"/>
        <str val="["/>
        <atomSing card="?" diag="0|2||fn:concat">
         <varRef name="position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <varRef name="path" slot="0"/>
      </choose>
      <choose line="1983">
       <vc op="eq" onEmpty="0" comp="CCC">
        <fn name="substring">
         <cvUntyped to="xs:string">
          <data>
           <dot type="attribute()"/>
          </data>
         </cvUntyped>
         <int val="1"/>
         <fn line="1980" name="string-length">
          <varRef name="path" slot="0"/>
         </fn>
        </fn>
        <varRef name="path" slot="0"/>
       </vc>
       <compAtt line="1984">
        <fn role="name" line="1978" name="name">
         <dot type="attribute()"/>
        </fn>
        <convert role="select" line="1985" from="xs:untypedAtomic" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <fn name="concat">
           <varRef name="path-updated" slot="2"/>
           <fn name="substring">
            <cvUntyped to="xs:string">
             <data>
              <dot type="attribute()"/>
             </data>
            </cvUntyped>
            <arith op="+" calc="i+i">
             <fn name="string-length">
              <varRef name="path-updated" slot="2"/>
             </fn>
             <int val="1"/>
            </arith>
           </fn>
          </fn>
         </cast>
        </convert>
       </compAtt>
       <true/>
       <copyOf line="1989" flags="vc">
        <dot type="attribute()"/>
       </copyOf>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="2.0" seq="0" rank="1" minImp="0" slots="3" flags="s" line="1961" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute(Q{}data-action)" jsTest="return SaxonJS.U.isAttr(item) &amp;&amp; item.name==='data-action'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1962">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1963" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1965" var="myid" as="xs:string" slot="2" eval="8">
      <fn name="concat">
       <fn name="generate-id">
        <dot type="attribute(Q{}data-action)"/>
       </fn>
       <atomSing card="?" diag="0|1||fn:concat">
        <varRef name="position" slot="1"/>
       </atomSing>
      </fn>
      <sequence line="1967">
       <att name="data-old-action">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <dot type="attribute(Q{}data-action)"/>
         </data>
        </convert>
       </att>
       <att line="1970" name="data-action">
        <convert from="xs:untypedAtomic" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <choose>
           <fn name="exists">
            <slash>
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <fn name="key">
              <str val="Q{http://saxon.sf.net/}kk102"/>
              <varRef name="myid" slot="2"/>
              <dot type="document-node()"/>
             </fn>
            </slash>
           </fn>
           <fn name="concat">
            <fn name="generate-id">
             <dot type="attribute(Q{}data-action)"/>
            </fn>
            <fn name="generate-id">
             <dot type="attribute(Q{}data-action)"/>
            </fn>
           </fn>
           <true/>
           <varRef name="myid" slot="2"/>
          </choose>
         </cast>
        </convert>
       </att>
      </sequence>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="10" binds="3 4">
  <template name="Q{}getReferencedInstanceField" flags="os" line="3287" module="saxon-xforms.xsl" slots="4">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3288">
    <param name="Q{}refi" slot="0" as="xs:string">
     <str role="select" val=""/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|refi">
      <check card="1" diag="8|0|XTTE0590|refi">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="0"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="3289" name="Q{}instances" slot="1" flags="t" as="element()*">
     <empty role="select"/>
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|instances">
      <supplied slot="1"/>
     </treat>
    </param>
    <choose line="3291">
     <varRef name="refi" slot="0"/>
     <let line="3292" var="instance-map" as="map(xs:string, xs:string)" slot="2" eval="7">
      <ufCall name="Q{http://www.w3.org/2002/xforms}getInstanceMap" tailCall="false" bSlot="0" eval="6">
       <varRef name="refi" slot="0"/>
      </ufCall>
      <sequence line="3293">
       <message>
        <sequence role="select">
         <valueOf>
          <str val="[getReferencedInstanceField] instance-map = "/>
         </valueOf>
         <valueOf>
          <fn name="serialize">
           <varRef name="instance-map" slot="2"/>
          </fn>
         </valueOf>
        </sequence>
        <str role="terminate" val="no"/>
        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
       </message>
       <let line="3298" var="this-instance" as="element()?" slot="3" eval="9">
        <callT line="3299" name="getInstance" bSlot="1">
         <withParam name="Q{}instance-id" flags="c" as="xs:string">
          <check line="3300" card="1" diag="8|0|XTTE0590|instance-id">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="instance-map" slot="2"/>
            <str val="instance-id"/>
           </ifCall>
          </check>
         </withParam>
        </callT>
        <evaluate line="3306" dxns="">
         <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="instance-map" slot="2"/>
           <str val="xpath"/>
          </ifCall>
         </check>
         <varRef role="cxt" name="this-instance" slot="3"/>
         <str role="sa" val="no"/>
         <map role="wp" size="0"/>
        </evaluate>
       </let>
      </sequence>
     </let>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="3" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getInstanceMap" line="3160" module="saxon-xforms.xsl" eval="8" flags="pU" as="map(xs:string, xs:string)" slots="2">
   <arg name="nodeset" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3171" var="vv:v0" as="map(xs:string, xs:string)+" slot="1" eval="4">
    <sequence>
     <map size="1">
      <str val="instance-id"/>
      <str val=""/>
     </map>
     <ifCall line="3172" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
      <str val="xpath"/>
      <fn name="normalize-space">
       <varRef name="nodeset" slot="0"/>
      </fn>
     </ifCall>
    </sequence>
    <ifCall line="3165" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
     <analyzeString>
      <fn role="select" name="normalize-space">
       <varRef name="nodeset" slot="0"/>
      </fn>
      <str role="regex" val="^instance\s*\(\s*'(.*)'\s*\)\s*/\s*(.*)$"/>
      <str role="flags" val=""/>
      <sequence role="matching" line="3167">
       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
        <str val="instance-id"/>
        <fn name="regex-group">
         <int val="1"/>
        </fn>
       </ifCall>
       <ifCall line="3168" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
        <str val="xpath"/>
        <fn name="regex-group">
         <int val="2"/>
        </fn>
       </ifCall>
      </sequence>
      <varRef role="nonMatching" line="3171" name="vv:v0" slot="1"/>
     </analyzeString>
     <map size="2">
      <str val="duplicates"/>
      <str val="reject"/>
      <str val="duplicates-error-code"/>
      <str val="XTDE3365"/>
     </map>
    </ifCall>
   </let>
  </function>
 </co>
 <co id="11" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" line="650" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string" slots="6">
   <arg name="base" as="xs:string"/>
   <arg name="relative" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="655" var="parentCallCount" as="xs:integer" slot="2" eval="7">
    <choose>
     <fn name="contains">
      <varRef name="relative" slot="1"/>
      <str val="/"/>
     </fn>
     <fn name="count">
      <filter flags="b">
       <fn name="tokenize">
        <varRef name="relative" slot="1"/>
        <str val="/"/>
        <str val=""/>
       </fn>
       <vc op="eq" comp="CCC">
        <dot type="xs:string"/>
        <str val=".."/>
       </vc>
      </filter>
     </fn>
     <fn name="contains">
      <varRef name="relative" slot="1"/>
      <str val=".."/>
     </fn>
     <int val="1"/>
     <true/>
     <int val="0"/>
    </choose>
    <let line="658" var="slashes" as="xs:integer*" slot="3" eval="3">
     <choose>
      <fn name="contains">
       <varRef name="base" slot="0"/>
       <str val="/"/>
      </fn>
      <fn name="index-of">
       <fn name="string-to-codepoints">
        <varRef name="base" slot="0"/>
       </fn>
       <int val="47"/>
      </fn>
      <true/>
      <int val="0"/>
     </choose>
     <check line="660" card="1" diag="5|0|XTTE0780|xforms:resolveXPathStrings">
      <sequence>
       <message>
        <sequence role="select">
         <valueOf>
          <str val="resolveXPathString base ="/>
         </valueOf>
         <valueOf>
          <varRef name="base" slot="0"/>
         </valueOf>
         <valueOf>
          <str val=" &#xA;            relative "/>
         </valueOf>
         <valueOf line="661">
          <varRef name="relative" slot="1"/>
         </valueOf>
         <valueOf>
          <str val="&#xA;            parentCallCount = "/>
         </valueOf>
         <valueOf line="662">
          <convert from="xs:integer" to="xs:string">
           <varRef name="parentCallCount" slot="2"/>
          </convert>
         </valueOf>
         <valueOf>
          <str val="&#xA;            slashes = "/>
         </valueOf>
         <valueOf line="663">
          <fn name="string-join">
           <convert from="xs:integer" to="xs:string">
            <varRef name="slashes" slot="3"/>
           </convert>
           <str val=" "/>
          </fn>
         </valueOf>
        </sequence>
        <str role="terminate" val="no"/>
        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
       </message>
       <let line="667" var="parentSlash" as="xs:integer" slot="4" eval="7">
        <choose line="669">
         <and op="and">
          <vc op="ge" onEmpty="0" comp="CAVC">
           <fn name="count">
            <varRef name="slashes" slot="3"/>
           </fn>
           <varRef name="parentCallCount" slot="2"/>
          </vc>
          <compareToInt op="gt" val="0">
           <varRef name="parentCallCount" slot="2"/>
          </compareToInt>
         </and>
         <let line="670" var="vv:v0" as="xs:integer" slot="5" eval="13">
          <arith op="-" calc="i-i">
           <varRef name="parentCallCount" slot="2"/>
           <int val="1"/>
          </arith>
          <check card="1" diag="3|0|XTTE0570|parentSlash">
           <filter flags="p">
            <varRef name="slashes" slot="3"/>
            <arith op="-" calc="i-i">
             <fn name="last"/>
             <varRef name="vv:v0" slot="5"/>
            </arith>
           </filter>
          </check>
         </let>
         <true/>
         <check line="673" card="1" diag="3|0|XTTE0570|parentSlash">
          <lastOf>
           <varRef name="slashes" slot="3"/>
          </lastOf>
         </check>
        </choose>
        <sequence line="677">
         <message>
          <sequence role="select">
           <valueOf>
            <str val="resolveXPathString base ="/>
           </valueOf>
           <valueOf>
            <varRef name="base" slot="0"/>
           </valueOf>
           <valueOf>
            <str val=" lastSlash "/>
           </valueOf>
           <valueOf>
            <convert from="xs:integer" to="xs:string">
             <varRef name="parentSlash" slot="4"/>
            </convert>
           </valueOf>
           <valueOf>
            <str val=" relative "/>
           </valueOf>
           <valueOf>
            <varRef name="relative" slot="1"/>
           </valueOf>
           <valueOf>
            <str val=" &#xA;        &#xA;        countparent = "/>
           </valueOf>
           <valueOf line="679">
            <convert from="xs:integer" to="xs:string">
             <varRef name="parentCallCount" slot="2"/>
            </convert>
           </valueOf>
           <choose line="680">
            <compareToInt op="gt" val="0">
             <varRef name="parentCallCount" slot="2"/>
            </compareToInt>
            <sequence>
             <valueOf>
              <str val="&#xA;                base without parent nodes = "/>
             </valueOf>
             <valueOf line="681">
              <fn name="substring">
               <varRef name="base" slot="0"/>
               <int val="1"/>
               <varRef name="parentSlash" slot="4"/>
              </fn>
             </valueOf>
             <valueOf>
              <str val="&#xA;                relativeCut = "/>
             </valueOf>
             <valueOf line="682">
              <fn name="replace">
               <varRef name="relative" slot="1"/>
               <str val="\.\./"/>
               <str val=""/>
               <str val=""/>
              </fn>
             </valueOf>
            </sequence>
           </choose>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <choose line="688">
          <compareToInt op="gt" val="0">
           <varRef name="parentCallCount" slot="2"/>
          </compareToInt>
          <fn line="692" name="concat">
           <fn name="substring">
            <varRef name="base" slot="0"/>
            <int val="1"/>
            <varRef name="parentSlash" slot="4"/>
           </fn>
           <fn name="replace">
            <varRef name="relative" slot="1"/>
            <str val="\.\./"/>
            <str val=""/>
            <str val=""/>
           </fn>
          </fn>
          <true/>
          <fn line="695" name="concat">
           <varRef name="base" slot="0"/>
           <str val="/"/>
           <varRef name="relative" slot="1"/>
          </fn>
         </choose>
        </sequence>
       </let>
      </sequence>
     </check>
    </let>
   </let>
  </function>
 </co>
 <co id="12" binds="">
  <function name="Q{http://saxonica.com/ns/forms-local}current-date" line="78" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:string" slots="0">
   <treat role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="79" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|today">
    <check card="1" diag="3|0|XTTE0570|today">
     <cvUntyped to="xs:string">
      <data>
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getCurrentDate"/>
        <arrayBlock/>
       </ifCall>
      </data>
     </cvUntyped>
    </check>
   </treat>
  </function>
 </co>
 <co id="13" binds="">
  <globalVariable name="Q{}debugMode" type="xs:boolean" line="27" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <true/>
  </globalVariable>
 </co>
 <co id="14" binds="15 16">
  <template name="Q{}main2" flags="os" line="31" module="sample3.xsl" slots="0">
   <callT role="body" ns="xsl=~ xforms=http://www.w3.org/2002/xforms array=http://www.w3.org/2005/xpath-functions/array f=http://www.saxonica.com/local/functions ixsl=~ js=~ xs=~ saxon=~ map=http://www.w3.org/2005/xpath-functions/map" line="32" name="xformsjs-main" bSlot="0" flags="t">
    <withParam name="Q{}xforms-doc" flags="c" as="document-node()">
     <fn line="33" name="doc">
      <gVarRef name="Q{}sampleForm" bSlot="1"/>
     </fn>
    </withParam>
    <withParam name="Q{}xFormsId" flags="c" as="xs:string">
     <str val="xForm"/>
    </withParam>
   </callT>
  </template>
 </co>
 <co id="17" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getWhileStatement" line="636" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="3">
   <arg name="map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="639">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="map" slot="0"/>
     <str val="@while"/>
    </ifCall>
    <treat line="640" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <true/>
    <treat line="643" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
          <check card="1" diag="0|0||map:get">
           <let var="vv:LHS1766145591" as="map(*)" slot="1" eval="1">
            <varRef name="map" slot="0"/>
            <for var="vv:STAR1026871825" as="xs:anyAtomicType" slot="2">
             <ifCall role="in" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
              <varRef name="vv:LHS1766145591" slot="1"/>
             </ifCall>
             <ifCall role="return" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <varRef name="vv:LHS1766145591" slot="1"/>
              <varRef name="vv:STAR1026871825" slot="2"/>
             </ifCall>
            </for>
           </let>
          </check>
         </treat>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="18" binds="18 18">
  <mode name="Q{}insert-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="11" flags="s" line="1872" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1873">
     <param name="Q{}insert-node" slot="0" flags="i" as="node()">
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|insert-node">
       <check card="1" diag="8|0|XTTE0590|insert-node">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1874" name="Q{}path" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1875" name="Q{}current-path" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|current-path">
       <check card="1" diag="8|0|XTTE0590|current-path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1876" var="updatedPath" as="xs:string" slot="3" eval="8">
      <fn name="concat">
       <varRef name="current-path" slot="2"/>
       <str val="/"/>
       <fn name="local-name">
        <dot type="element()"/>
       </fn>
      </fn>
      <let line="1878" var="name" as="xs:string" slot="4" eval="8">
       <fn name="local-name">
        <dot type="element()"/>
       </fn>
       <let line="1880" var="currentPosition" as="xs:integer" slot="5" eval="7">
        <let var="vv:current585323788" as="element()" slot="6" eval="7">
         <dot type="element()"/>
         <let var="vv:v0" as="xs:string" slot="7" eval="13">
          <fn name="local-name">
           <varRef name="vv:current585323788" slot="6"/>
          </fn>
          <arith op="+" calc="i+i">
           <fn name="count">
            <filter flags="b">
             <slash simple="1">
              <dot type="element()"/>
              <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <vc op="eq" comp="CCC">
              <fn name="local-name">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v0" slot="7"/>
             </vc>
            </filter>
           </fn>
           <int val="1"/>
          </arith>
         </let>
        </let>
        <let line="1883" var="updatedPath2" as="document-node()" slot="8" eval="7">
         <doc line="1884" flags="t" validation="preserve">
          <sequence>
           <valueOf flags="l">
            <varRef name="updatedPath" slot="3"/>
           </valueOf>
           <choose line="1886">
            <fn name="exists">
             <let var="vv:current-28121473" as="element()" slot="9" eval="7">
              <dot type="element()"/>
              <let var="vv:v1" as="xs:string" slot="10" eval="13">
               <fn name="local-name">
                <varRef name="vv:current-28121473" slot="9"/>
               </fn>
               <filter flags="b">
                <union op="|">
                 <fn name="reverse">
                  <slash simple="1">
                   <dot type="element()"/>
                   <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                  </slash>
                 </fn>
                 <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </union>
                <vc op="eq" comp="CCC">
                 <fn name="local-name">
                  <dot type="element()"/>
                 </fn>
                 <varRef name="vv:v1" slot="10"/>
                </vc>
               </filter>
              </let>
             </let>
            </fn>
            <valueOf line="1887" flags="l">
             <fn name="concat">
              <str val="["/>
              <varRef name="currentPosition" slot="5"/>
              <str val="]"/>
             </fn>
            </valueOf>
           </choose>
          </sequence>
         </doc>
         <choose line="1893">
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <varRef name="updatedPath" slot="3"/>
            <varRef name="path" slot="1"/>
           </vc>
           <vc line="1882" op="eq" onEmpty="0" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <fn name="count">
             <filter flags="b">
              <slash>
               <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <vc op="eq" comp="CCC">
               <fn name="local-name">
                <dot type="element()"/>
               </fn>
               <varRef name="name" slot="4"/>
              </vc>
             </filter>
            </fn>
            <varRef name="currentPosition" slot="5"/>
           </vc>
          </and>
          <sequence line="1897">
           <copy flags="cin">
            <applyT role="content" mode="Q{}insert-node" bSlot="0">
             <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
             <withParam name="Q{}insert-node" as="node()">
              <varRef line="1899" name="insert-node" slot="0"/>
             </withParam>
             <withParam name="Q{}path" as="xs:string">
              <varRef line="1900" name="path" slot="1"/>
             </withParam>
             <withParam name="Q{}current-path" as="document-node()">
              <varRef line="1901" name="updatedPath2" slot="8"/>
             </withParam>
            </applyT>
           </copy>
           <copyOf line="1904" flags="vc">
            <varRef name="insert-node" slot="0"/>
           </copyOf>
          </sequence>
          <true/>
          <copy line="1909" flags="cin">
           <applyT role="content" mode="Q{}insert-node" bSlot="1">
            <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
            <withParam name="Q{}insert-node" as="node()">
             <varRef line="1910" name="insert-node" slot="0"/>
            </withParam>
            <withParam name="Q{}path" as="xs:string">
             <varRef line="1911" name="path" slot="1"/>
            </withParam>
            <withParam name="Q{}current-path" as="document-node()">
             <varRef line="1912" name="updatedPath2" slot="8"/>
            </withParam>
           </applyT>
          </copy>
         </choose>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="19" binds="20">
  <function name="Q{http://www.w3.org/2002/xforms}convert-json-to-xml" line="2864" module="saxon-xforms.xsl" eval="7" flags="pU" as="node()" slots="2">
   <arg name="jinstance" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2870" var="result" as="document-node()" slot="1" eval="7">
    <doc line="2872" validation="preserve">
     <applyT mode="Q{}jxml-xml" bSlot="0">
      <doc role="select" line="2867" validation="preserve">
       <fn name="json-to-xml">
        <varRef name="jinstance" slot="0"/>
       </fn>
      </doc>
     </applyT>
    </doc>
    <varRef line="2875" name="result" slot="1"/>
   </let>
  </function>
 </co>
 <co id="21" binds="">
  <template name="Q{}serverError" flags="os" line="1040" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1041">
    <param name="Q{}responseMap" slot="0" flags="i" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|responseMap">
      <check card="1" diag="8|0|XTTE0590|responseMap">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <message line="1042">
     <sequence role="select">
      <valueOf>
       <str val="Server side error HTTP response - "/>
      </valueOf>
      <valueOf>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <varRef name="responseMap" slot="0"/>
          <str val="status"/>
         </ifCall>
        </atomSing>
        <str val=" "/>
        <atomSing card="?" diag="0|2||fn:concat">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <varRef name="responseMap" slot="0"/>
          <str val="message"/>
         </ifCall>
        </atomSing>
       </fn>
      </valueOf>
     </sequence>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
   </sequence>
  </template>
 </co>
 <co id="22" binds="23">
  <function name="Q{http://www.w3.org/2002/xforms}convert-xml-to-jxml" line="2787" module="saxon-xforms.xsl" eval="7" flags="pU" as="node()" slots="2">
   <arg name="xinstance" as="node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2789" var="rep-xml" as="document-node()" slot="1" eval="7">
    <doc line="2791" validation="preserve">
     <elem name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="dl">
      <applyT mode="Q{}json-xml" bSlot="0">
       <varRef role="select" name="xinstance" slot="0"/>
      </applyT>
     </elem>
    </doc>
    <varRef line="2794" name="rep-xml" slot="1"/>
   </let>
  </function>
 </co>
 <co id="24" vis="PUBLIC" binds="">
  <globalParam name="Q{}xforms-instance-id" type="item()*" line="24" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-jinstance"/>
  </globalParam>
 </co>
 <co id="25" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getIfStatement" line="624" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="1">
   <arg name="map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="627">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="map" slot="0"/>
     <str val="@if"/>
    </ifCall>
    <treat line="628" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@if"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <true/>
    <treat line="631" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@if"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="26" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-constraints-on-fields" line="900" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="4">
   <arg name="updatedInstanceXML" as="document-node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="903" var="constraint-fieldsi" as="element()*" slot="1" eval="8">
    <filter flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-constraint)" jsTest="return item.name==='data-constraint'"/>
     </fn>
    </filter>
    <forEach line="907">
     <varRef name="constraint-fieldsi" slot="1"/>
     <let line="908" var="contexti" as="node()" slot="2" eval="7">
      <treat line="909" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|contexti">
       <check card="1" diag="3|0|XTTE0570|contexti">
        <evaluate dxns="">
         <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
          <cvUntyped to="xs:string">
           <attVal name="Q{}data-ref" chk="0"/>
          </cvUntyped>
         </check>
         <varRef role="cxt" name="updatedInstanceXML" slot="0"/>
         <str role="sa" val="no"/>
         <map role="wp" size="0"/>
        </evaluate>
       </check>
      </treat>
      <let line="912" var="resulti" as="xs:boolean" slot="3" eval="7">
       <treat line="915" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|resulti">
        <check card="1" diag="3|0|XTTE0570|resulti">
         <cvUntyped to="xs:boolean">
          <data>
           <evaluate dxns="">
            <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
             <cvUntyped to="xs:string">
              <attVal name="Q{}data-constraint" chk="0"/>
             </cvUntyped>
            </check>
            <varRef role="cxt" name="contexti" slot="2"/>
            <str role="sa" val="no"/>
            <map role="wp" size="0"/>
           </evaluate>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <choose line="923">
        <fn name="not">
         <varRef name="resulti" slot="3"/>
        </fn>
        <dot type="element()"/>
       </choose>
      </let>
     </let>
    </forEach>
   </let>
  </function>
 </co>
 <co id="27" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" line="361" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="16">
   <arg name="refElement" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="364" var="pendingUpdatesi" as="map(xs:string, xs:string)?" slot="1" eval="7">
    <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdatesi">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getPendingUpdates"/>
      <arrayBlock/>
     </ifCall>
    </treat>
    <let line="365" var="pendingUpdateKeys" as="xs:anyAtomicType*" slot="2" eval="3">
     <choose>
      <fn name="exists">
       <varRef name="pendingUpdatesi" slot="1"/>
      </fn>
      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
       <check card="1" diag="0|0||map:keys">
        <varRef name="pendingUpdatesi" slot="1"/>
       </check>
      </ifCall>
     </choose>
     <let line="367" var="updatesi" as="map(xs:string, xs:string)?" slot="3" eval="7">
      <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|updatesi">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getUpdates"/>
        <arrayBlock/>
       </ifCall>
      </treat>
      <let line="368" var="updateKeys" as="xs:anyAtomicType*" slot="4" eval="3">
       <choose>
        <fn name="exists">
         <varRef name="updatesi" slot="3"/>
        </fn>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
         <check card="1" diag="0|0||map:keys">
          <varRef name="updatesi" slot="3"/>
         </check>
        </ifCall>
       </choose>
       <sequence line="370">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="&#xA;            pendingKeys "/>
          </valueOf>
          <valueOf line="371">
           <fn name="serialize">
            <varRef name="pendingUpdateKeys" slot="2"/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <message line="374">
         <sequence role="select">
          <valueOf>
           <str val="&#xA;            UpdateKeys "/>
          </valueOf>
          <valueOf line="375">
           <fn name="serialize">
            <varRef name="updateKeys" slot="4"/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="378" var="relevantMap" as="map(xs:string, xs:string)" slot="5" eval="7">
         <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|relevantMap">
          <check card="1" diag="3|0|XTTE0570|relevantMap">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="getRelevantMap"/>
            <arrayBlock/>
           </ifCall>
          </check>
         </treat>
         <let line="379" var="mapKeys" as="xs:anyAtomicType*" slot="6" eval="3">
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
           <varRef name="relevantMap" slot="5"/>
          </ifCall>
          <let line="381" var="relevantFields" as="xs:anyAtomicType*" slot="7" eval="3">
           <sequence line="382">
            <forEach>
             <varRef name="mapKeys" slot="6"/>
             <choose line="383">
              <fn name="matches">
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                <varRef name="relevantMap" slot="5"/>
                <dot type="xs:anyAtomicType"/>
               </ifCall>
               <varRef name="refElement" slot="0"/>
               <str val=""/>
              </fn>
              <dot line="384" type="xs:anyAtomicType"/>
             </choose>
            </forEach>
            <forEach line="389">
             <varRef name="pendingUpdateKeys" slot="2"/>
             <let line="390" var="keyi" as="xs:string?" slot="8" eval="7">
              <lastOf>
               <fn name="tokenize">
                <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
                 <cvUntyped to="xs:string">
                  <dot type="xs:anyAtomicType"/>
                 </cvUntyped>
                </treat>
                <str val="/"/>
                <str val=""/>
               </fn>
              </lastOf>
              <let line="393" var="vv:v0" as="xs:string" slot="9" eval="13">
               <check card="1" diag="0|1||fn:matches">
                <varRef name="keyi" slot="8"/>
               </check>
               <forEach line="391">
                <varRef name="mapKeys" slot="6"/>
                <choose line="393">
                 <fn name="matches">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <varRef name="relevantMap" slot="5"/>
                   <dot type="xs:anyAtomicType"/>
                  </ifCall>
                  <varRef name="vv:v0" slot="9"/>
                  <str val=""/>
                 </fn>
                 <dot line="394" type="xs:anyAtomicType"/>
                </choose>
               </forEach>
              </let>
             </let>
            </forEach>
            <forEach line="401">
             <varRef name="updateKeys" slot="4"/>
             <let line="402" var="keyi" as="xs:string?" slot="10" eval="7">
              <lastOf>
               <fn name="tokenize">
                <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
                 <cvUntyped to="xs:string">
                  <dot type="xs:anyAtomicType"/>
                 </cvUntyped>
                </treat>
                <str val="/"/>
                <str val=""/>
               </fn>
              </lastOf>
              <let line="405" var="vv:v1" as="xs:string" slot="11" eval="13">
               <check card="1" diag="0|1||fn:matches">
                <varRef name="keyi" slot="10"/>
               </check>
               <forEach line="403">
                <varRef name="mapKeys" slot="6"/>
                <choose line="405">
                 <fn name="matches">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <varRef name="relevantMap" slot="5"/>
                   <dot type="xs:anyAtomicType"/>
                  </ifCall>
                  <varRef name="vv:v1" slot="11"/>
                  <str val=""/>
                 </fn>
                 <dot line="406" type="xs:anyAtomicType"/>
                </choose>
               </forEach>
              </let>
             </let>
            </forEach>
           </sequence>
           <sequence line="413">
            <message>
             <sequence role="select">
              <valueOf>
               <str val="&#xA;            refi = "/>
              </valueOf>
              <valueOf line="414">
               <varRef name="refElement" slot="0"/>
              </valueOf>
              <valueOf>
               <str val="&#xA;            &#xA;            &#xA;            relevant Fields, fields = "/>
              </valueOf>
              <valueOf line="417">
               <fn name="serialize">
                <varRef name="relevantFields" slot="7"/>
               </fn>
              </valueOf>
              <valueOf>
               <str val="&#xA;            relevant Fields count = "/>
              </valueOf>
              <valueOf line="418">
               <convert from="xs:integer" to="xs:string">
                <fn name="count">
                 <varRef name="relevantFields" slot="7"/>
                </fn>
               </convert>
              </valueOf>
             </sequence>
             <str role="terminate" val="no"/>
             <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
            </message>
            <let line="421" var="updatedInstanceXML4" as="item()?" slot="12" eval="8">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="getInstance"/>
              <arrayBlock/>
             </ifCall>
             <sequence line="423">
              <forEach>
               <varRef name="relevantFields" slot="7"/>
               <let line="424" var="keyi" as="xs:anyAtomicType" slot="13" eval="7">
                <dot type="xs:anyAtomicType"/>
                <let line="425" var="context" as="node()*" slot="14" eval="8">
                 <slash>
                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                  <fn name="key">
                   <str val="Q{http://saxon.sf.net/}kk101"/>
                   <varRef name="keyi" slot="13"/>
                   <dot type="document-node()"/>
                  </fn>
                 </slash>
                 <let line="426" var="relevantCheck" as="xs:boolean" slot="15" eval="7">
                  <treat line="427" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantCheck">
                   <check card="1" diag="3|0|XTTE0570|relevantCheck">
                    <cvUntyped to="xs:boolean">
                     <data>
                      <evaluate dxns="">
                       <fn role="xpath" name="concat">
                        <dot type="xs:anyAtomicType"/>
                        <str val="/"/>
                        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                         <varRef name="relevantMap" slot="5"/>
                         <dot type="xs:anyAtomicType"/>
                        </ifCall>
                       </fn>
                       <varRef role="cxt" name="updatedInstanceXML4" slot="12"/>
                       <str role="sa" val="no"/>
                       <map role="wp" size="0"/>
                      </evaluate>
                     </data>
                    </cvUntyped>
                   </check>
                  </treat>
                  <choose line="430">
                   <varRef name="relevantCheck" slot="15"/>
                   <ifCall line="433" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
                    <str val="style.display"/>
                    <str val="inline"/>
                    <check card="1" diag="0|2||ixsl:set-property">
                     <conditionalSort>
                      <fn name="exists">
                       <tail start="2">
                        <varRef name="context" slot="14"/>
                       </tail>
                      </fn>
                      <docOrder intra="1">
                       <slash>
                        <varRef name="context" slot="14"/>
                        <axis name="parent" nodeTest="(document-node()|element())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                       </slash>
                      </docOrder>
                     </conditionalSort>
                    </check>
                   </ifCall>
                   <true/>
                   <ifCall line="436" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
                    <str val="style.display"/>
                    <str val="none"/>
                    <check card="1" diag="0|2||ixsl:set-property">
                     <conditionalSort>
                      <fn name="exists">
                       <tail start="2">
                        <varRef name="context" slot="14"/>
                       </tail>
                      </fn>
                      <docOrder intra="1">
                       <slash>
                        <varRef name="context" slot="14"/>
                        <axis name="parent" nodeTest="(document-node()|element())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                       </slash>
                      </docOrder>
                     </conditionalSort>
                    </check>
                   </ifCall>
                  </choose>
                 </let>
                </let>
               </let>
              </forEach>
              <ifCall line="442" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="clearPendingUpdates"/>
               <arrayBlock/>
              </ifCall>
              <ifCall line="443" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="clearUpdates"/>
               <arrayBlock/>
              </ifCall>
             </sequence>
            </let>
           </sequence>
          </let>
         </let>
        </let>
       </sequence>
      </let>
     </let>
    </let>
   </let>
  </function>
 </co>
 <co id="28" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}random" line="68" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:double" slots="0">
   <check role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="69" card="1" diag="3|0|XTTE0570|randomNumber">
    <convert from="xs:anyAtomicType" to="xs:double" flags="p">
     <cvUntyped to="xs:double">
      <data>
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="Math.random"/>
        <arrayBlock/>
       </ifCall>
      </data>
     </cvUntyped>
    </convert>
   </check>
  </function>
 </co>
 <co id="29" binds="6 25 11 11 30 6 27 6 11 11 30 6 27">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onchange" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="21" flags="s" line="448" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="448" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="449" var="refi" as="attribute(Q{}data-ref)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
     <let line="453" var="xforms-value-change" as="item()?" slot="1" eval="8">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getAction"/>
       <arrayBlock>
        <fn name="string">
         <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
        </fn>
       </arrayBlock>
      </ifCall>
      <let line="455" var="updatedInstanceXML" as="document-node()" slot="2" eval="7">
       <doc line="456" validation="preserve">
        <let var="instanceXML" as="item()?" slot="3" eval="8">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="getInstance"/>
          <arrayBlock/>
         </ifCall>
         <applyT line="457" mode="Q{}form-check-initial" bSlot="0">
          <varRef role="select" name="instanceXML" slot="3"/>
         </applyT>
        </let>
       </doc>
       <sequence line="459">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setInstance"/>
         <arrayBlock>
          <varRef name="updatedInstanceXML" slot="2"/>
         </arrayBlock>
        </ifCall>
        <ifCall line="465" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setPendingUpdates"/>
         <arrayBlock>
          <treat line="461" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <ifCall line="466" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setUpdates"/>
         <arrayBlock>
          <treat line="463" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <message line="468">
         <sequence role="select">
          <valueOf>
           <str val="&#xA;            input detected onchange event, ref= "/>
          </valueOf>
          <valueOf line="469">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <varRef name="refi" slot="0"/>
            </data>
           </convert>
          </valueOf>
          <valueOf>
           <str val=", actions = "/>
          </valueOf>
          <valueOf line="469">
           <fn name="serialize">
            <varRef name="xforms-value-change" slot="1"/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <forEach line="473">
         <varRef name="xforms-value-change" slot="1"/>
         <let line="474" var="action-map" as="item()" slot="4" eval="7">
          <dot/>
          <let line="476" var="ref" as="item()*" slot="5" eval="3">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
             <varRef name="action-map" slot="4"/>
            </treat>
            <str val="@ref"/>
           </ifCall>
           <sequence line="480">
            <message>
             <sequence role="select">
              <valueOf>
               <str val="&#xA;                input-changed evalute ref= "/>
              </valueOf>
              <valueOf line="481">
               <fn name="string-join">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <mergeAdj>
                   <varRef name="ref" slot="5"/>
                  </mergeAdj>
                 </data>
                </convert>
                <str val=" "/>
               </fn>
              </valueOf>
              <valueOf>
               <str val=", position = "/>
              </valueOf>
              <valueOf line="481">
               <convert from="xs:integer" to="xs:string">
                <fn name="position"/>
               </convert>
              </valueOf>
              <valueOf>
               <str val="&#xA;                action "/>
              </valueOf>
              <valueOf line="482">
               <fn name="serialize">
                <varRef name="action-map" slot="4"/>
               </fn>
              </valueOf>
             </sequence>
             <str role="terminate" val="no"/>
             <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
            </message>
            <let line="485" var="context" as="node()?" slot="6" eval="7">
             <treat line="486" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|context">
              <check card="?" diag="3|0|XTTE0570|context">
               <evaluate dxns="">
                <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                 <check card="1" diag="4|0||xsl:evaluate/xpath">
                  <cvUntyped to="xs:string">
                   <data>
                    <varRef name="ref" slot="5"/>
                   </data>
                  </cvUntyped>
                 </check>
                </treat>
                <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
                <str role="sa" val="no"/>
                <map role="wp" size="0"/>
               </evaluate>
              </check>
             </treat>
             <let line="491" var="ifVar" as="xs:string?" slot="7" eval="7">
              <ufCall name="Q{http://www.w3.org/2002/xforms}getIfStatement" tailCall="false" bSlot="1" eval="7">
               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||xforms:getIfStatement">
                <varRef name="action-map" slot="4"/>
               </treat>
              </ufCall>
              <let line="497" var="ifExecuted" as="xs:boolean" slot="8" eval="7">
               <choose line="499">
                <fn name="exists">
                 <varRef name="ifVar" slot="7"/>
                </fn>
                <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
                 <check card="1" diag="3|0|XTTE0570|ifExecuted">
                  <cvUntyped to="xs:boolean">
                   <data>
                    <evaluate dxns="">
                     <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                      <varRef name="ifVar" slot="7"/>
                     </check>
                     <varRef role="cxt" name="context" slot="6"/>
                     <str role="sa" val="no"/>
                     <map role="wp" size="0"/>
                    </evaluate>
                   </data>
                  </cvUntyped>
                 </check>
                </treat>
                <true/>
                <true/>
               </choose>
               <choose line="507">
                <varRef name="ifExecuted" slot="8"/>
                <choose line="511">
                 <fn name="exists">
                  <ifCall line="510" name="Q{http://www.w3.org/2005/xpath-functions/map}find" type="function(*)">
                   <varRef name="action-map" slot="4"/>
                   <str val="setvalue"/>
                  </ifCall>
                 </fn>
                 <let line="551" var="vv:v1" as="xs:string?" slot="9" eval="13">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <varRef name="refi" slot="0"/>
                   </data>
                  </convert>
                  <let line="525" var="vv:v0" as="xs:string" slot="10" eval="13">
                   <check card="1" diag="0|0||xforms:resolveXPathStrings">
                    <cvUntyped to="xs:string">
                     <data>
                      <varRef name="refi" slot="0"/>
                     </data>
                    </cvUntyped>
                   </check>
                   <let line="512" var="setValues" as="item()*" slot="11" eval="3">
                    <sequence line="514">
                     <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                       <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                        <varRef name="action-map" slot="4"/>
                       </treat>
                       <str val="setvalue"/>
                      </ifCall>
                     </ifCall>
                     <ifCall line="515" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                       <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                        <varRef name="action-map" slot="4"/>
                       </treat>
                       <str val="setvalue"/>
                      </ifCall>
                     </ifCall>
                    </sequence>
                    <sequence line="521">
                     <forEach>
                      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                       <varRef name="setValues" slot="11"/>
                      </ifCall>
                      <let line="525" var="refz" as="xs:string" slot="12" eval="7">
                       <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="2" eval="6 4">
                        <varRef name="vv:v0" slot="10"/>
                        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                         <check card="1" diag="0|1||xforms:resolveXPathStrings">
                          <cvUntyped to="xs:string">
                           <let var="vv:LHS1644231115" as="function(*)" slot="13" eval="7">
                            <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1644231115">
                             <dot/>
                            </treat>
                            <choose>
                             <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                              <varRef name="vv:LHS1644231115" slot="13"/>
                             </instance>
                             <data>
                              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                               <treat module="saxon-xforms.xsl" line="525" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                <varRef name="vv:LHS1644231115" slot="13"/>
                               </treat>
                               <str val="ref"/>
                              </ifCall>
                             </data>
                             <true/>
                             <data>
                              <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                             </data>
                            </choose>
                           </let>
                          </cvUntyped>
                         </check>
                        </treat>
                       </ufCall>
                       <let line="526" var="valuez" as="document-node()" slot="14" eval="7">
                        <doc line="529" validation="preserve">
                         <choose>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                            <dot/>
                           </treat>
                           <str val="@value"/>
                          </ifCall>
                          <sequence line="530">
                           <message>
                            <sequence role="select">
                             <valueOf>
                              <str val="&#xA;                                            $refi = "/>
                             </valueOf>
                             <valueOf line="531">
                              <convert from="xs:untypedAtomic" to="xs:string">
                               <data>
                                <varRef name="refi" slot="0"/>
                               </data>
                              </convert>
                             </valueOf>
                             <valueOf>
                              <str val="&#xA;                                            @value "/>
                             </valueOf>
                             <valueOf line="532">
                              <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="3" eval="7 7">
                               <check card="1" diag="0|0||xforms:resolveXPathStrings">
                                <cvUntyped to="xs:string">
                                 <data>
                                  <varRef name="refi" slot="0"/>
                                 </data>
                                </cvUntyped>
                               </check>
                               <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                                <check card="1" diag="0|1||xforms:resolveXPathStrings">
                                 <cvUntyped to="xs:string">
                                  <data>
                                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                    <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                     <dot/>
                                    </treat>
                                    <str val="@value"/>
                                   </ifCall>
                                  </data>
                                 </cvUntyped>
                                </check>
                               </treat>
                              </ufCall>
                             </valueOf>
                            </sequence>
                            <str role="terminate" val="no"/>
                            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                           </message>
                           <let line="534" var="contexti" as="node()" slot="15" eval="8">
                            <evaluate line="535" as="node()" dxns="">
                             <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                              <cvUntyped to="xs:string">
                               <data>
                                <varRef name="refi" slot="0"/>
                               </data>
                              </cvUntyped>
                             </check>
                             <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
                             <str role="sa" val="no"/>
                             <map role="wp" size="0"/>
                            </evaluate>
                            <evaluate line="538" dxns="">
                             <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                              <check card="1" diag="4|0||xsl:evaluate/xpath">
                               <cvUntyped to="xs:string">
                                <data>
                                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                  <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                   <dot/>
                                  </treat>
                                  <str val="@value"/>
                                 </ifCall>
                                </data>
                               </cvUntyped>
                              </check>
                             </treat>
                             <varRef role="cxt" name="contexti" slot="15"/>
                             <str role="sa" val="no"/>
                             <map role="wp" size="0"/>
                            </evaluate>
                           </let>
                          </sequence>
                          <ifCall line="541" name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                            <dot/>
                           </treat>
                           <str val="value"/>
                          </ifCall>
                          <cast line="542" as="xs:string" emptiable="1">
                           <atomSing card="?" diag="2|0||cast as">
                            <let var="vv:LHS537066525" as="function(*)" slot="16" eval="7">
                             <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS537066525">
                              <dot/>
                             </treat>
                             <choose>
                              <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                               <varRef name="vv:LHS537066525" slot="16"/>
                              </instance>
                              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                <varRef name="vv:LHS537066525" slot="16"/>
                               </treat>
                               <str val="value"/>
                              </ifCall>
                              <true/>
                              <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                             </choose>
                            </let>
                           </atomSing>
                          </cast>
                          <true/>
                          <str val=""/>
                         </choose>
                        </doc>
                        <sequence line="550">
                         <message>
                          <sequence role="select">
                           <valueOf>
                            <str val=" &#xA;                                refi = "/>
                           </valueOf>
                           <valueOf line="551">
                            <varRef name="vv:v1" slot="9"/>
                           </valueOf>
                           <valueOf>
                            <str val="&#xA;                                refz = "/>
                           </valueOf>
                           <valueOf line="552">
                            <varRef name="refz" slot="12"/>
                           </valueOf>
                          </sequence>
                          <str role="terminate" val="no"/>
                          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                         </message>
                         <message line="553">
                          <sequence role="select">
                           <valueOf>
                            <str val=" value = "/>
                           </valueOf>
                           <valueOf>
                            <cast as="xs:string" emptiable="0">
                             <data>
                              <varRef name="valuez" slot="14"/>
                             </data>
                            </cast>
                           </valueOf>
                          </sequence>
                          <str role="terminate" val="no"/>
                          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                         </message>
                         <choose line="556">
                          <fn name="exists">
                           <varRef name="refz" slot="12"/>
                          </fn>
                          <let line="558" var="associated-form-control" as="node()?" slot="17" eval="7">
                           <check card="?" diag="3|0|XTTE0570|associated-form-control">
                            <slash>
                             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                             <fn name="key">
                              <str val="Q{http://saxon.sf.net/}kk101"/>
                              <varRef name="refz" slot="12"/>
                              <dot type="document-node()"/>
                             </fn>
                            </slash>
                           </check>
                           <sequence line="559">
                            <message>
                             <sequence role="select">
                              <valueOf>
                               <str val=" $associated-form-control = "/>
                              </valueOf>
                              <valueOf>
                               <fn name="serialize">
                                <varRef name="associated-form-control" slot="17"/>
                               </fn>
                              </valueOf>
                             </sequence>
                             <str role="terminate" val="no"/>
                             <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                            </message>
                            <choose line="561">
                             <fn name="exists">
                              <varRef name="associated-form-control" slot="17"/>
                             </fn>
                             <sequence line="563">
                              <applyT mode="Q{}set-field" bSlot="4">
                               <varRef role="select" name="associated-form-control" slot="17"/>
                               <withParam name="Q{}value" flags="t" as="xs:string">
                                <cast line="564" as="xs:string" emptiable="0">
                                 <data>
                                  <varRef name="valuez" slot="14"/>
                                 </data>
                                </cast>
                               </withParam>
                              </applyT>
                              <ifCall line="567" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                               <check card="1" diag="0|0||ixsl:call">
                                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                               </check>
                               <str val="setUpdates"/>
                               <arrayBlock>
                                <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                 <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                                  <check card="1" diag="0|0||map:put">
                                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                    <check card="1" diag="0|0||ixsl:call">
                                     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                    </check>
                                    <str val="getUpdates"/>
                                    <arrayBlock/>
                                   </ifCall>
                                  </check>
                                 </treat>
                                 <varRef name="refz" slot="12"/>
                                 <cast as="xs:string" emptiable="0">
                                  <data>
                                   <varRef name="valuez" slot="14"/>
                                  </data>
                                 </cast>
                                </ifCall>
                               </arrayBlock>
                              </ifCall>
                              <message line="569">
                               <let role="select" var="mapxx" as="item()?" slot="18" eval="8">
                                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                 <check card="1" diag="0|0||ixsl:call">
                                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                 </check>
                                 <str val="getUpdates"/>
                                 <arrayBlock/>
                                </ifCall>
                                <sequence line="568">
                                 <valueOf>
                                  <str val="&#xA;                                            Updates map = "/>
                                 </valueOf>
                                 <fn line="570" name="serialize">
                                  <varRef name="mapxx" slot="18"/>
                                 </fn>
                                </sequence>
                               </let>
                               <str role="terminate" val="no"/>
                               <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                              </message>
                             </sequence>
                             <true/>
                             <ifCall line="576" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                              <check card="1" diag="0|0||ixsl:call">
                               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                              </check>
                              <str val="setPendingUpdates"/>
                              <arrayBlock>
                               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                                 <check card="1" diag="0|0||map:put">
                                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                   <check card="1" diag="0|0||ixsl:call">
                                    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                   </check>
                                   <str val="getPendingUpdates"/>
                                   <arrayBlock/>
                                  </ifCall>
                                 </check>
                                </treat>
                                <varRef name="refz" slot="12"/>
                                <cast as="xs:string" emptiable="0">
                                 <data>
                                  <varRef name="valuez" slot="14"/>
                                 </data>
                                </cast>
                               </ifCall>
                              </arrayBlock>
                             </ifCall>
                            </choose>
                           </sequence>
                          </let>
                         </choose>
                        </sequence>
                       </let>
                      </let>
                     </forEach>
                     <choose line="586">
                      <fn name="exists">
                       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                        <varRef name="setValues" slot="11"/>
                       </ifCall>
                      </fn>
                      <let line="587" var="pendingUpdates" as="map(xs:string, xs:string)?" slot="19" eval="7">
                       <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdates">
                        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                         <check card="1" diag="0|0||ixsl:call">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                         </check>
                         <str val="getPendingUpdates"/>
                         <arrayBlock/>
                        </ifCall>
                       </treat>
                       <let line="589" var="updatedInstanceXML3" as="document-node()" slot="20" eval="7">
                        <doc line="591" validation="preserve">
                         <applyT mode="Q{}form-check-initial" bSlot="5">
                          <varRef role="select" name="updatedInstanceXML" slot="2"/>
                          <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                           <varRef line="592" name="pendingUpdates" slot="19"/>
                          </withParam>
                         </applyT>
                        </doc>
                        <ifCall line="596" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                         <check card="1" diag="0|0||ixsl:call">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                         </check>
                         <str val="setInstance"/>
                         <arrayBlock>
                          <varRef name="updatedInstanceXML3" slot="20"/>
                         </arrayBlock>
                        </ifCall>
                       </let>
                      </let>
                     </choose>
                    </sequence>
                   </let>
                  </let>
                 </let>
                </choose>
               </choose>
              </let>
             </let>
            </let>
           </sequence>
          </let>
         </let>
        </forEach>
        <message line="604">
         <sequence role="select">
          <valueOf>
           <str val="&#xA;            instance before checkRelevantFields= "/>
          </valueOf>
          <valueOf line="605">
           <fn name="serialize">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <check card="1" diag="0|0||ixsl:call">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
             </check>
             <str val="getInstance"/>
             <arrayBlock/>
            </ifCall>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <ufCall line="607" name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" tailCall="false" bSlot="6" eval="7">
         <check card="1" diag="0|0||xforms:checkRelevantFields">
          <cvUntyped to="xs:string">
           <attVal name="Q{}data-element" chk="0"/>
          </cvUntyped>
         </check>
        </ufCall>
       </sequence>
      </let>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="1" rank="0" minImp="0" slots="22" flags="s" line="701" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="701" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="703" var="refi" as="attribute(Q{}data-ref)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
     <let line="709" var="xforms-actions" as="map(*)?" slot="1" eval="7">
      <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|xforms-actions">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getAction"/>
        <arrayBlock>
         <fn name="string">
          <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
         </fn>
        </arrayBlock>
       </ifCall>
      </treat>
      <sequence line="711">
       <message>
        <sequence role="select">
         <valueOf>
          <str val="action map = "/>
         </valueOf>
         <fn name="serialize">
          <varRef name="xforms-actions" slot="1"/>
         </fn>
        </sequence>
        <str role="terminate" val="no"/>
        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
       </message>
       <let line="713" var="updatedInstanceXML" as="document-node()" slot="2" eval="7">
        <doc line="714" validation="preserve">
         <let var="instanceXML" as="item()?" slot="3" eval="8">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="getInstance"/>
           <arrayBlock/>
          </ifCall>
          <applyT line="715" mode="Q{}form-check-initial" bSlot="7">
           <varRef role="select" name="instanceXML" slot="3"/>
          </applyT>
         </let>
        </doc>
        <sequence line="721">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="setPendingUpdates"/>
          <arrayBlock>
           <treat line="718" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
            <map size="0"/>
           </treat>
          </arrayBlock>
         </ifCall>
         <ifCall line="722" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="setUpdates"/>
          <arrayBlock>
           <treat line="719" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
            <map size="0"/>
           </treat>
          </arrayBlock>
         </ifCall>
         <message line="724">
          <sequence role="select">
           <valueOf>
            <str val=" select changed refi = "/>
           </valueOf>
           <valueOf>
            <convert from="xs:untypedAtomic" to="xs:string">
             <data>
              <varRef name="refi" slot="0"/>
             </data>
            </convert>
           </valueOf>
           <valueOf>
            <str val="&#xA;        xforms-action "/>
           </valueOf>
           <fn line="725" name="serialize">
            <varRef name="xforms-actions" slot="1"/>
           </fn>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <forEach line="728">
          <varRef name="xforms-actions" slot="1"/>
          <let line="729" var="action-map" as="map(*)" slot="4" eval="7">
           <dot type="map(*)"/>
           <let line="733" var="ref" as="item()*" slot="5" eval="3">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <varRef name="action-map" slot="4"/>
             <str val="@ref"/>
            </ifCall>
            <sequence line="735">
             <message>
              <sequence role="select">
               <valueOf>
                <str val=" select ref = "/>
               </valueOf>
               <valueOf>
                <fn name="string-join">
                 <convert from="xs:anyAtomicType" to="xs:string">
                  <data>
                   <mergeAdj>
                    <varRef name="ref" slot="5"/>
                   </mergeAdj>
                  </data>
                 </convert>
                 <str val=" "/>
                </fn>
               </valueOf>
              </sequence>
              <str role="terminate" val="no"/>
              <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
             </message>
             <let line="737" var="context" as="node()?" slot="6" eval="7">
              <treat line="738" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|context">
               <check card="?" diag="3|0|XTTE0570|context">
                <evaluate dxns="">
                 <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                  <check card="1" diag="4|0||xsl:evaluate/xpath">
                   <cvUntyped to="xs:string">
                    <data>
                     <varRef name="ref" slot="5"/>
                    </data>
                   </cvUntyped>
                  </check>
                 </treat>
                 <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
                 <str role="sa" val="no"/>
                 <map role="wp" size="0"/>
                </evaluate>
               </check>
              </treat>
              <let line="741" var="ifVar" as="item()*" slot="7" eval="3">
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                <varRef name="action-map" slot="4"/>
                <str val="@if"/>
               </ifCall>
               <sequence line="744">
                <message>
                 <sequence role="select">
                  <valueOf>
                   <str val=" select ref = "/>
                  </valueOf>
                  <valueOf>
                   <fn name="string-join">
                    <convert from="xs:anyAtomicType" to="xs:string">
                     <data>
                      <mergeAdj>
                       <varRef name="ref" slot="5"/>
                      </mergeAdj>
                     </data>
                    </convert>
                    <str val=" "/>
                   </fn>
                  </valueOf>
                  <valueOf>
                   <str val="&#xA;            @if "/>
                  </valueOf>
                  <valueOf line="745">
                   <fn name="string-join">
                    <convert from="xs:anyAtomicType" to="xs:string">
                     <data>
                      <mergeAdj>
                       <varRef name="ifVar" slot="7"/>
                      </mergeAdj>
                     </data>
                    </convert>
                    <str val=" "/>
                   </fn>
                  </valueOf>
                  <valueOf>
                   <str val="&#xA;                @while"/>
                  </valueOf>
                  <valueOf line="746">
                   <fn name="string-join">
                    <convert from="xs:anyAtomicType" to="xs:string">
                     <data>
                      <mergeAdj>
                       <ifCall line="743" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                        <varRef name="action-map" slot="4"/>
                        <str val="@while"/>
                       </ifCall>
                      </mergeAdj>
                     </data>
                    </convert>
                    <str val=" "/>
                   </fn>
                  </valueOf>
                 </sequence>
                 <str role="terminate" val="no"/>
                 <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                </message>
                <let line="752" var="ifExecuted" as="xs:boolean" slot="8" eval="7">
                 <choose line="754">
                  <fn name="exists">
                   <varRef name="ifVar" slot="7"/>
                  </fn>
                  <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
                   <check card="1" diag="3|0|XTTE0570|ifExecuted">
                    <cvUntyped to="xs:boolean">
                     <data>
                      <evaluate dxns="">
                       <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                        <check card="1" diag="4|0||xsl:evaluate/xpath">
                         <cvUntyped to="xs:string">
                          <data>
                           <varRef name="ifVar" slot="7"/>
                          </data>
                         </cvUntyped>
                        </check>
                       </treat>
                       <varRef role="cxt" name="context" slot="6"/>
                       <str role="sa" val="no"/>
                       <map role="wp" size="0"/>
                      </evaluate>
                     </data>
                    </cvUntyped>
                   </check>
                  </treat>
                  <true/>
                  <true/>
                 </choose>
                 <choose line="762">
                  <varRef name="ifExecuted" slot="8"/>
                  <sequence line="763">
                   <message>
                    <sequence role="select">
                     <valueOf>
                      <str val="&#xA;                        @if  executed "/>
                     </valueOf>
                     <valueOf line="764">
                      <fn name="string-join">
                       <convert from="xs:anyAtomicType" to="xs:string">
                        <data>
                         <mergeAdj>
                          <varRef name="ifVar" slot="7"/>
                         </mergeAdj>
                        </data>
                       </convert>
                       <str val=" "/>
                      </fn>
                     </valueOf>
                    </sequence>
                    <str role="terminate" val="no"/>
                    <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                   </message>
                   <choose line="769">
                    <fn name="exists">
                     <ifCall line="768" name="Q{http://www.w3.org/2005/xpath-functions/map}find" type="function(*)">
                      <varRef name="action-map" slot="4"/>
                      <str val="setvalue"/>
                     </ifCall>
                    </fn>
                    <let line="790" var="vv:v0" as="xs:string" slot="9" eval="13">
                     <check card="1" diag="0|0||xforms:resolveXPathStrings">
                      <cvUntyped to="xs:string">
                       <data>
                        <varRef name="refi" slot="0"/>
                       </data>
                      </cvUntyped>
                     </check>
                     <let line="770" var="setValues" as="item()*" slot="10" eval="3">
                      <ifCall line="772" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                        <varRef name="action-map" slot="4"/>
                        <str val="setvalue"/>
                       </ifCall>
                      </ifCall>
                      <sequence line="774">
                       <message>
                        <sequence role="select">
                         <valueOf>
                          <str val="&#xA;                            setValues "/>
                         </valueOf>
                         <valueOf line="775">
                          <fn name="serialize">
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                            <varRef name="setValues" slot="10"/>
                           </ifCall>
                          </fn>
                         </valueOf>
                        </sequence>
                        <str role="terminate" val="no"/>
                        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                       </message>
                       <forEach line="777">
                        <varRef name="setValues" slot="10"/>
                        <let line="778" var="ifVari" as="item()*" slot="11" eval="3">
                         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                          <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                           <dot/>
                          </treat>
                          <str val="@if"/>
                         </ifCall>
                         <let line="779" var="ifExecutedi" as="xs:boolean" slot="12" eval="7">
                          <choose line="781">
                           <fn name="exists">
                            <varRef name="ifVari" slot="11"/>
                           </fn>
                           <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecutedi">
                            <check card="1" diag="3|0|XTTE0570|ifExecutedi">
                             <cvUntyped to="xs:boolean">
                              <data>
                               <evaluate dxns="">
                                <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                                 <check card="1" diag="4|0||xsl:evaluate/xpath">
                                  <cvUntyped to="xs:string">
                                   <data>
                                    <varRef name="ifVari" slot="11"/>
                                   </data>
                                  </cvUntyped>
                                 </check>
                                </treat>
                                <varRef role="cxt" name="context" slot="6"/>
                                <str role="sa" val="no"/>
                                <map role="wp" size="0"/>
                               </evaluate>
                              </data>
                             </cvUntyped>
                            </check>
                           </treat>
                           <true/>
                           <true/>
                          </choose>
                          <let line="790" var="refz" as="xs:string" slot="13" eval="7">
                           <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="8" eval="6 4">
                            <varRef name="vv:v0" slot="9"/>
                            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                             <check card="1" diag="0|1||xforms:resolveXPathStrings">
                              <cvUntyped to="xs:string">
                               <let var="vv:LHS1484673893" as="function(*)" slot="14" eval="7">
                                <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1484673893">
                                 <dot/>
                                </treat>
                                <choose>
                                 <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                                  <varRef name="vv:LHS1484673893" slot="14"/>
                                 </instance>
                                 <data>
                                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                   <treat module="saxon-xforms.xsl" line="790" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                    <varRef name="vv:LHS1484673893" slot="14"/>
                                   </treat>
                                   <str val="ref"/>
                                  </ifCall>
                                 </data>
                                 <true/>
                                 <data>
                                  <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                                 </data>
                                </choose>
                               </let>
                              </cvUntyped>
                             </check>
                            </treat>
                           </ufCall>
                           <let line="791" var="valuez" as="xs:string" slot="15" eval="7">
                            <choose line="794">
                             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                               <dot/>
                              </treat>
                              <str val="@value"/>
                             </ifCall>
                             <check line="795" card="1" diag="3|0|XTTE0570|valuez">
                              <sequence>
                               <message>
                                <sequence role="select">
                                 <valueOf>
                                  <str val="&#xA;                                            @value "/>
                                 </valueOf>
                                 <valueOf line="796">
                                  <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="9" eval="7 7">
                                   <check card="1" diag="0|0||xforms:resolveXPathStrings">
                                    <cvUntyped to="xs:string">
                                     <data>
                                      <varRef name="refi" slot="0"/>
                                     </data>
                                    </cvUntyped>
                                   </check>
                                   <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                                    <check card="1" diag="0|1||xforms:resolveXPathStrings">
                                     <cvUntyped to="xs:string">
                                      <data>
                                       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                        <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                         <dot/>
                                        </treat>
                                        <str val="@value"/>
                                       </ifCall>
                                      </data>
                                     </cvUntyped>
                                    </check>
                                   </treat>
                                  </ufCall>
                                 </valueOf>
                                </sequence>
                                <str role="terminate" val="no"/>
                                <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                               </message>
                               <let line="798" var="contexti" as="node()" slot="16" eval="8">
                                <evaluate line="799" as="node()" dxns="">
                                 <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                                  <cvUntyped to="xs:string">
                                   <data>
                                    <varRef name="refi" slot="0"/>
                                   </data>
                                  </cvUntyped>
                                 </check>
                                 <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
                                 <str role="sa" val="no"/>
                                 <map role="wp" size="0"/>
                                </evaluate>
                                <evaluate line="802" as="xs:string" dxns="">
                                 <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                                  <check card="1" diag="4|0||xsl:evaluate/xpath">
                                   <cvUntyped to="xs:string">
                                    <data>
                                     <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                      <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                       <dot/>
                                      </treat>
                                      <str val="@value"/>
                                     </ifCall>
                                    </data>
                                   </cvUntyped>
                                  </check>
                                 </treat>
                                 <varRef role="cxt" name="contexti" slot="16"/>
                                 <str role="sa" val="no"/>
                                 <map role="wp" size="0"/>
                                </evaluate>
                               </let>
                              </sequence>
                             </check>
                             <ifCall line="805" name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                               <dot/>
                              </treat>
                              <str val="value"/>
                             </ifCall>
                             <check line="806" card="1" diag="3|0|XTTE0570|valuez">
                              <cast as="xs:string" emptiable="1">
                               <atomSing card="?" diag="2|0||cast as">
                                <let var="vv:LHS587003819" as="function(*)" slot="17" eval="7">
                                 <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS587003819">
                                  <dot/>
                                 </treat>
                                 <choose>
                                  <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                                   <varRef name="vv:LHS587003819" slot="17"/>
                                  </instance>
                                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                   <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                                    <varRef name="vv:LHS587003819" slot="17"/>
                                   </treat>
                                   <str val="value"/>
                                  </ifCall>
                                  <true/>
                                  <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                                 </choose>
                                </let>
                               </atomSing>
                              </cast>
                             </check>
                             <true/>
                             <str val=""/>
                            </choose>
                            <sequence line="814">
                             <message>
                              <sequence role="select">
                               <valueOf>
                                <str val=" ref = "/>
                               </valueOf>
                               <valueOf>
                                <varRef name="refz" slot="13"/>
                               </valueOf>
                              </sequence>
                              <str role="terminate" val="no"/>
                              <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                             </message>
                             <message line="815">
                              <sequence role="select">
                               <valueOf>
                                <str val=" value = "/>
                               </valueOf>
                               <valueOf>
                                <varRef name="valuez" slot="15"/>
                               </valueOf>
                              </sequence>
                              <str role="terminate" val="no"/>
                              <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                             </message>
                             <choose line="818">
                              <and op="and">
                               <fn name="exists">
                                <varRef name="refz" slot="13"/>
                               </fn>
                               <varRef name="ifExecutedi" slot="12"/>
                              </and>
                              <let line="820" var="associated-form-control" as="node()?" slot="18" eval="7">
                               <check card="?" diag="3|0|XTTE0570|associated-form-control">
                                <slash>
                                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                                 <fn name="key">
                                  <str val="Q{http://saxon.sf.net/}kk101"/>
                                  <varRef name="refz" slot="13"/>
                                  <dot type="document-node()"/>
                                 </fn>
                                </slash>
                               </check>
                               <sequence line="821">
                                <message>
                                 <sequence role="select">
                                  <valueOf>
                                   <str val=" $associated-form-control = "/>
                                  </valueOf>
                                  <valueOf>
                                   <fn name="serialize">
                                    <varRef name="associated-form-control" slot="18"/>
                                   </fn>
                                  </valueOf>
                                 </sequence>
                                 <str role="terminate" val="no"/>
                                 <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                                </message>
                                <choose line="823">
                                 <fn name="exists">
                                  <varRef name="associated-form-control" slot="18"/>
                                 </fn>
                                 <sequence line="825">
                                  <applyT mode="Q{}set-field" bSlot="10">
                                   <varRef role="select" name="associated-form-control" slot="18"/>
                                   <withParam name="Q{}value" flags="t" as="xs:string">
                                    <varRef line="826" name="valuez" slot="15"/>
                                   </withParam>
                                  </applyT>
                                  <ifCall line="828" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                   <check card="1" diag="0|0||ixsl:call">
                                    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                   </check>
                                   <str val="setUpdates"/>
                                   <arrayBlock>
                                    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                     <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                                      <check card="1" diag="0|0||map:put">
                                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                        <check card="1" diag="0|0||ixsl:call">
                                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                        </check>
                                        <str val="getUpdates"/>
                                        <arrayBlock/>
                                       </ifCall>
                                      </check>
                                     </treat>
                                     <varRef name="refz" slot="13"/>
                                     <varRef name="valuez" slot="15"/>
                                    </ifCall>
                                   </arrayBlock>
                                  </ifCall>
                                  <message line="830">
                                   <let role="select" var="mapxx" as="item()?" slot="19" eval="8">
                                    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                     <check card="1" diag="0|0||ixsl:call">
                                      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                     </check>
                                     <str val="getUpdates"/>
                                     <arrayBlock/>
                                    </ifCall>
                                    <sequence line="829">
                                     <valueOf>
                                      <str val="&#xA;                                            Updates map = "/>
                                     </valueOf>
                                     <fn line="831" name="serialize">
                                      <varRef name="mapxx" slot="19"/>
                                     </fn>
                                    </sequence>
                                   </let>
                                   <str role="terminate" val="no"/>
                                   <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                                  </message>
                                 </sequence>
                                 <true/>
                                 <sequence line="837">
                                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                   <check card="1" diag="0|0||ixsl:call">
                                    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                   </check>
                                   <str val="setPendingUpdates"/>
                                   <arrayBlock>
                                    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                     <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                                      <check card="1" diag="0|0||map:put">
                                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                        <check card="1" diag="0|0||ixsl:call">
                                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                        </check>
                                        <str val="getPendingUpdates"/>
                                        <arrayBlock/>
                                       </ifCall>
                                      </check>
                                     </treat>
                                     <varRef name="refz" slot="13"/>
                                     <varRef name="valuez" slot="15"/>
                                    </ifCall>
                                   </arrayBlock>
                                  </ifCall>
                                  <message line="838">
                                   <sequence role="select">
                                    <valueOf>
                                     <str val=" update instance only ref = "/>
                                    </valueOf>
                                    <valueOf>
                                     <varRef name="refz" slot="13"/>
                                    </valueOf>
                                   </sequence>
                                   <str role="terminate" val="no"/>
                                   <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                                  </message>
                                 </sequence>
                                </choose>
                               </sequence>
                              </let>
                             </choose>
                            </sequence>
                           </let>
                          </let>
                         </let>
                        </let>
                       </forEach>
                      </sequence>
                     </let>
                    </let>
                   </choose>
                  </sequence>
                 </choose>
                </let>
               </sequence>
              </let>
             </let>
            </sequence>
           </let>
          </let>
         </forEach>
         <let line="857" var="updatedInstanceXML2" as="document-node()" slot="20" eval="7">
          <doc line="858" validation="preserve">
           <let var="instanceXML" as="item()?" slot="21" eval="8">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <check card="1" diag="0|0||ixsl:call">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
             </check>
             <str val="getInstance"/>
             <arrayBlock/>
            </ifCall>
            <applyT line="859" mode="Q{}form-check-initial" bSlot="11">
             <varRef role="select" name="instanceXML" slot="21"/>
             <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
              <treat line="860" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                <check card="1" diag="0|0||ixsl:call">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                </check>
                <str val="getPendingUpdates"/>
                <arrayBlock/>
               </ifCall>
              </treat>
             </withParam>
            </applyT>
           </let>
          </doc>
          <sequence line="863">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setInstance"/>
            <arrayBlock>
             <varRef name="updatedInstanceXML2" slot="20"/>
            </arrayBlock>
           </ifCall>
           <message line="864">
            <sequence role="select">
             <valueOf>
              <str val="&#xA;            instance after select change "/>
             </valueOf>
             <valueOf line="865">
              <fn name="serialize">
               <varRef name="updatedInstanceXML2" slot="20"/>
              </fn>
             </valueOf>
            </sequence>
            <str role="terminate" val="no"/>
            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
           </message>
           <ufCall line="867" name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" tailCall="false" bSlot="12" eval="7">
            <check card="1" diag="0|0||xforms:checkRelevantFields">
             <cvUntyped to="xs:string">
              <attVal name="Q{}data-element" chk="0"/>
             </cvUntyped>
            </check>
           </ufCall>
          </sequence>
         </let>
        </sequence>
       </let>
      </sequence>
     </let>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id="15" binds="31 31 32">
  <template name="Q{}xformsjs-main" flags="os" line="31" module="saxon-xforms.xsl" slots="9">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="32">
    <param name="Q{}xforms-doc" slot="0" as="document-node()?">
     <empty role="select"/>
     <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|xforms-doc">
      <check card="?" diag="8|0|XTTE0590|xforms-doc">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="33" name="Q{}xforms-file" slot="1" as="xs:string?">
     <empty role="select"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xforms-file">
      <check card="?" diag="8|0|XTTE0590|xforms-file">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="40" name="Q{}instance-xml" slot="2" as="document-node()*">
     <empty role="select"/>
     <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|instance-xml">
      <supplied slot="2"/>
     </treat>
    </param>
    <param line="41" name="Q{}xFormsId" slot="3" as="xs:string">
     <str role="select" val="xForm"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xFormsId">
      <check card="1" diag="8|0|XTTE0590|xFormsId">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="3"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="49" var="xforms-doci" as="document-node()?" slot="4" eval="7">
     <choose>
      <fn name="empty">
       <varRef name="xforms-doc" slot="0"/>
      </fn>
      <fn name="doc">
       <varRef name="xforms-file" slot="1"/>
      </fn>
      <true/>
      <varRef name="xforms-doc" slot="0"/>
     </choose>
     <let line="57" var="instance-doc" as="document-node()" slot="5" eval="7">
      <doc line="59" validation="preserve">
       <choose>
        <fn name="empty">
         <varRef name="instance-xml" slot="2"/>
        </fn>
        <copyOf line="60" flags="vc">
         <slash>
          <slash>
           <slash>
            <slash simple="1">
             <varRef name="xforms-doci" slot="4"/>
             <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
            </slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
           </slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
          </slash>
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
        </copyOf>
        <true/>
        <copyOf line="63" flags="vc">
         <conditionalSort>
          <fn name="exists">
           <tail start="2">
            <varRef name="instance-xml" slot="2"/>
           </tail>
          </fn>
          <docOrder intra="0">
           <slash>
            <varRef name="instance-xml" slot="2"/>
            <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
          </docOrder>
         </conditionalSort>
        </copyOf>
       </choose>
      </doc>
      <let line="81" var="bindings" as="map(xs:string, element(Q{http://www.w3.org/2002/xforms}bind))" slot="6" eval="8">
       <ifCall line="83" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <forEach>
         <slash>
          <slash>
           <slash simple="1">
            <varRef name="xforms-doci" slot="4"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
           </slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
          </slash>
          <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}bind)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='bind';"/>
         </slash>
         <ifCall line="120" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <check card="1" diag="0|0||map:entry">
           <cast as="xs:string" emptiable="1">
            <choose>
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             </fn>
             <attVal name="Q{}id" chk="0"/>
             <true/>
             <attVal name="Q{}nodeset" chk="0"/>
            </choose>
           </cast>
          </check>
          <dot type="element(Q{http://www.w3.org/2002/xforms}bind)"/>
         </ifCall>
        </forEach>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <let line="162" var="RelevantBindings" as="map(xs:string, xs:string)" slot="7" eval="7">
        <treat line="164" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|RelevantBindings">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <forEach>
           <ifCall line="160" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
            <varRef name="bindings" slot="6"/>
           </ifCall>
           <let line="165" var="bindingNode" as="element(Q{http://www.w3.org/2002/xforms}bind)" slot="8" eval="7">
            <check card="1" diag="3|0|XTTE0570|bindingNode">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <varRef name="bindings" slot="6"/>
              <cast as="xs:string" emptiable="0">
               <dot type="xs:anyAtomicType"/>
              </cast>
             </ifCall>
            </check>
            <choose line="167">
             <fn name="exists">
              <filter flags="b">
               <varRef name="bindingNode" slot="8"/>
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
               </fn>
              </filter>
             </fn>
             <ifCall line="169" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
              <check line="168" card="1" diag="3|0|XTTE0570|keyi">
               <cast as="xs:string" emptiable="1">
                <data>
                 <slash simple="1">
                  <varRef name="bindingNode" slot="8"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cast>
              </check>
              <cast as="xs:string" emptiable="1">
               <data>
                <slash simple="1">
                 <varRef name="bindingNode" slot="8"/>
                 <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                </slash>
               </data>
              </cast>
             </ifCall>
            </choose>
           </let>
          </forEach>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
        </treat>
        <sequence line="176">
         <message>
          <sequence role="select">
           <valueOf>
            <str val="&#xA;            RelevantBindings = "/>
           </valueOf>
           <fn line="177" name="serialize">
            <varRef name="RelevantBindings" slot="7"/>
           </fn>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <choose line="182">
          <gc op="=" card="M:N" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
           <data>
            <slash>
             <slash simple="1">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
              <axis name="descendant" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
             </slash>
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </slash>
           </data>
           <data>
            <gVarRef name="Q{}xforms-cache-id" bSlot="0"/>
           </data>
          </gc>
          <sequence line="183">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsDoc"/>
            <arrayBlock>
             <varRef name="xforms-doc" slot="0"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="184" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsID"/>
            <arrayBlock>
             <varRef name="xFormsId" slot="3"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="185" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setRelevantMap"/>
            <arrayBlock>
             <varRef name="RelevantBindings" slot="7"/>
            </arrayBlock>
           </ifCall>
          </sequence>
          <true/>
          <sequence line="196">
           <forEach>
            <slash simple="1">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <axis name="descendant" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            </slash>
            <resultDoc line="205" global="#&#xD;&#xA;#Fri Jun 22 18:52:20 BST 2018&#xD;&#xA;indent=no&#xD;&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xD;&#xA;encoding=utf-8&#xD;&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xD;&#xA;omit-xml-declaration=no&#xD;&#xA;method=html&#xD;&#xA;" local="#&#xD;&#xA;#Fri Jun 22 18:52:20 BST 2018&#xD;&#xA;">
             <str role="href" val="?."/>
             <elem role="content" line="213" name="script" nsuri="" namespaces="rdf xhtml js in fn map array ev">
              <sequence>
               <att name="type" flags="l">
                <str val="text/javascript"/>
               </att>
               <att name="id" flags="l">
                <fn name="string-join">
                 <convert from="xs:anyAtomicType" to="xs:string">
                  <data>
                   <mergeAdj>
                    <gVarRef name="Q{}xforms-cache-id" bSlot="1"/>
                   </mergeAdj>
                  </data>
                 </convert>
                 <str val=" "/>
                </fn>
               </att>
               <valueOf flags="l">
                <str val="                &#xA;                            var XFormsDoc = null;&#xA;                            var defaultInstanceDoc = null;&#xA;                            var instanceDoc = null;&#xA;                            var pendingUpdatesMap = null;&#xA;                            var updatesMap = null;&#xA;                            var XFormsID= 'xForm';&#xA;                            var actions = {};&#xA;                            var relevantMap = {};&#xA;                            &#xA;                            var getCurrentDate = function(){&#xA;                            var today = new Date();&#xA;                            var dd = today.getDate();&#xA;                            var mm = today.getMonth()+1; //January is 0!&#xA;                            var yyyy = today.getFullYear();&#xA;                            &#xA;                            if(dd &lt; 10) {&#xA;                            dd = '0'+dd&#xA;                            } &#xA;                            &#xA;                            if(mm &lt; 10) {&#xA;                            mm = '0'+mm&#xA;                            } &#xA;                            &#xA;                            today = yyyy + '-' + mm + '-' + dd;&#xA;                            return today;&#xA;                            }&#xA;                            &#xA;                            &#xA;                            var setXFormsDoc = function(doc) {&#xA;                                XFormsDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getXFormsDoc = function() {&#xA;                                return XFormsDoc;&#xA;                            }&#xA;                            var setXFormsID = function(id) {&#xA;                                XFormsID = id;&#xA;                            }&#xA;                            &#xA;                            var getXFormsID = function() {&#xA;                                return XFormsID;&#xA;                            }&#xA;                            &#xA;                            var setInstance = function(doc) {&#xA;                            instanceDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getInstance = function() {&#xA;                            return instanceDoc;&#xA;                            }&#xA;                            &#xA;                            var setDefaultInstance = function(doc) {&#xA;                            defaultInstanceDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getDefaultInstance = function() {&#xA;                            return defaultInstanceDoc;&#xA;                            }&#xA;                            &#xA;                            var setPendingUpdates = function(map1) {&#xA;                            pendingUpdatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearPendingUpdates = function() {&#xA;                            pendingUpdatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getPendingUpdates = function() {&#xA;                            return pendingUpdatesMap;&#xA;                            }&#xA;                            &#xA;                            var setUpdates = function(map1) {&#xA;                                updatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearUpdates = function() {&#xA;                                updatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getUpdates = function() {&#xA;                            return updatesMap;&#xA;                            }&#xA;                            &#xA;                            var addAction = function(name, value){&#xA;                                actions[name] = value;&#xA;                            }&#xA;&#xA;                            var getAction = function(name){&#xA;                                return actions[name];&#xA;                            }&#xA;                            &#xA;                            var updateAction = function(actioni, key, value){&#xA;                                actioni[key] = value;&#xA;                                return actioni;&#xA;                            }&#xA;                            &#xA;                            var setRelevantMap = function(map1) {&#xA;                                relevantMap = map1;                            &#xA;                            }&#xA;                            &#xA;                            var getRelevantMap = function() {&#xA;                                return relevantMap;&#xA;                            }&#xA;                            &#xA;  &#xA;                            var startTime = function(name) {&#xA;                                console.time(name);&#xA;                            }&#xA;                            &#xA;                            var endTime = function(name) {&#xA;                            console.timeEnd(name);&#xA;                            }&#xA;                            &#xA;                        "/>
               </valueOf>
              </sequence>
             </elem>
            </resultDoc>
           </forEach>
           <ifCall line="331" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsDoc"/>
            <arrayBlock>
             <varRef name="xforms-doc" slot="0"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="332" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setRelevantMap"/>
            <arrayBlock>
             <varRef name="RelevantBindings" slot="7"/>
            </arrayBlock>
           </ifCall>
          </sequence>
         </choose>
         <choose line="337">
          <fn name="exists">
           <varRef name="instance-doc" slot="5"/>
          </fn>
          <ifCall line="338" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="setInstance"/>
           <arrayBlock>
            <varRef name="instance-doc" slot="5"/>
           </arrayBlock>
          </ifCall>
         </choose>
         <resultDoc line="343" global="#&#xD;&#xA;#Fri Jun 22 18:52:20 BST 2018&#xD;&#xA;indent=no&#xD;&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xD;&#xA;encoding=utf-8&#xD;&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xD;&#xA;omit-xml-declaration=no&#xD;&#xA;method=html&#xD;&#xA;" local="#&#xD;&#xA;#Fri Jun 22 18:52:20 BST 2018&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xD;&#xA;">
          <fn role="href" name="concat">
           <str val="#"/>
           <varRef name="xFormsId" slot="3"/>
          </fn>
          <applyT role="content" line="349" bSlot="2">
           <slash role="select" simple="1">
            <varRef name="xforms-doci" slot="4"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
           </slash>
           <withParam name="Q{}instance1" flags="t" as="document-node()">
            <varRef line="350" name="instance-doc" slot="5"/>
           </withParam>
           <withParam name="Q{}instances" flags="t" as="element()*">
            <choose line="70">
             <fn name="empty">
              <varRef name="instance-xml" slot="2"/>
             </fn>
             <slash line="71">
              <slash>
               <slash simple="1">
                <varRef name="xforms-doci" slot="4"/>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
               </slash>
               <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
              </slash>
              <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
             </slash>
             <true/>
             <conditionalSort line="74">
              <fn name="exists">
               <tail start="2">
                <varRef name="instance-xml" slot="2"/>
               </tail>
              </fn>
              <docOrder intra="0">
               <slash>
                <varRef name="instance-xml" slot="2"/>
                <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               </slash>
              </docOrder>
             </conditionalSort>
            </choose>
           </withParam>
           <withParam name="Q{}bindings" flags="t" as="map(xs:string, node())">
            <varRef line="352" name="bindings" slot="6"/>
           </withParam>
           <withParam name="Q{}submissions" flags="t" as="map(xs:string, xs:string)">
            <ifCall line="129" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
             <forEach>
              <slash>
               <slash>
                <slash simple="1">
                 <varRef name="xforms-doci" slot="4"/>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                </slash>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
               </slash>
               <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}submission)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submission';"/>
              </slash>
              <ifCall line="148" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
               <choose line="142">
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                </fn>
                <check card="1" diag="3|0|XTTE0570|map-key">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}id" chk="0"/>
                 </cast>
                </check>
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                </fn>
                <check card="1" diag="3|0|XTTE0570|map-key">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}ref" chk="0"/>
                 </cast>
                </check>
                <true/>
                <str val="null"/>
               </choose>
               <choose line="147">
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}resource)" jsTest="return item.name==='resource'"/>
                </fn>
                <check card="1" diag="3|0|XTTE0570|map-value">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}resource" chk="0"/>
                 </cast>
                </check>
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}action)" jsTest="return item.name==='action'"/>
                </fn>
                <check card="1" diag="3|0|XTTE0570|map-value">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}action" chk="0"/>
                 </cast>
                </check>
                <true/>
                <str val="null"/>
               </choose>
              </ifCall>
             </forEach>
             <map size="2">
              <str val="duplicates"/>
              <str val="reject"/>
              <str val="duplicates-error-code"/>
              <str val="XTDE3365"/>
             </map>
            </ifCall>
           </withParam>
          </applyT>
         </resultDoc>
        </sequence>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="30" binds="">
  <mode name="Q{}set-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="1" flags="s" line="3146" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3147">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <ifCall line="3149" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:textarea"/>
      <str val="value"/>
     </ifCall>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="1" flags="s" line="3138" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3139">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="3141">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="value" slot="0"/>
        </data>
        <attVal name="Q{}value" chk="0"/>
       </gc>
      </filter>
      <ifCall line="3142" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
       <str val="selected"/>
       <true/>
       <dot type="element(Q{}option)"/>
      </ifCall>
     </forEach>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="1" flags="s" line="3117" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3118">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="3121">
      <dot type="*:input"/>
      <choose line="3123">
       <and op="and">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
        </fn>
        <gc op="=" card="1:1" comp="CCC">
         <attVal name="Q{}type" chk="0"/>
         <str val="checkbox"/>
        </gc>
       </and>
       <ifCall line="3124" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="checked"/>
        <choose>
         <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <data>
           <varRef name="value" slot="0"/>
          </data>
          <str val="true"/>
         </gc>
         <check card="?" diag="0|1||ixsl:set-property">
          <varRef name="value" slot="0"/>
         </check>
         <true/>
         <str val=""/>
        </choose>
        <dot type="*:input"/>
       </ifCall>
       <true/>
       <ifCall line="3127" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="value"/>
        <check card="?" diag="0|1||ixsl:set-property">
         <varRef name="value" slot="0"/>
        </check>
        <dot type="*:input"/>
       </ifCall>
      </choose>
     </forEach>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="33" binds="21">
  <template name="Q{}HTTPsubmit" cxt="map(*)" jsTest="return SaxonJS.U.isMap(item)" flags="s" line="1012" module="saxon-xforms.xsl" slots="1">
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1017" var="responseXML" as="item()*" slot="0" eval="3">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
     <dot type="map(*)"/>
     <str val="body"/>
    </ifCall>
    <sequence line="1021">
     <message>
      <sequence role="select">
       <valueOf>
        <str val="Response: "/>
       </valueOf>
       <valueOf>
        <fn name="serialize">
         <dot line="1020" type="map(*)"/>
        </fn>
       </valueOf>
      </sequence>
      <str role="terminate" val="no"/>
      <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
     </message>
     <choose line="1024">
      <fn name="empty">
       <varRef name="responseXML" slot="0"/>
      </fn>
      <callT line="1025" name="serverError" bSlot="0" flags="t">
       <withParam name="Q{}responseMap" flags="c" as="map(*)">
        <dot line="1026" type="map(*)"/>
       </withParam>
      </callT>
      <true/>
      <message line="1032">
       <sequence role="select">
        <valueOf>
         <str val="Response: "/>
        </valueOf>
        <valueOf>
         <fn name="serialize">
          <varRef name="responseXML" slot="0"/>
         </fn>
        </valueOf>
       </sequence>
       <str role="terminate" val="no"/>
       <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
      </message>
     </choose>
    </sequence>
   </let>
  </template>
 </co>
 <co id="34" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}foo" line="43" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:boolean" slots="1">
   <arg name="num" as="xs:integer"/>
   <compareToInt role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="46" op="lt" val="5">
    <varRef name="num" slot="0"/>
   </compareToInt>
  </function>
 </co>
 <co id="16" binds="">
  <globalVariable name="Q{}sampleForm" type="xs:string" line="21" module="sample3.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <fn ns="xsl=~ xforms=http://www.w3.org/2002/xforms array=http://www.w3.org/2005/xpath-functions/array f=http://www.saxonica.com/local/functions ixsl=~ js=~ xs=~ saxon=~ map=http://www.w3.org/2005/xpath-functions/map" line="21" name="resolve-uri">
    <str val="xml/sample3form.xml"/>
    <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:resolve-uri">
     <check card="1" diag="0|1||fn:resolve-uri">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}location" type="item()?"/>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </fn>
  </globalVariable>
 </co>
 <co id="35" binds="6 18 9 36 15 6 37 33">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onclick" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2008" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2008" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="2" rank="0" minImp="0" slots="30" flags="s" line="2011" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2011" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2016" var="action-map" as="item()?" slot="0" eval="8">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getAction"/>
      <arrayBlock>
       <fn name="string">
        <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
       </fn>
      </arrayBlock>
     </ifCall>
     <let line="2026" var="updatedInstanceXML" as="document-node()" slot="1" eval="7">
      <doc line="2027" validation="preserve">
       <let var="instanceXML" as="item()?" slot="2" eval="8">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getInstance"/>
         <arrayBlock/>
        </ifCall>
        <applyT line="2028" mode="Q{}form-check-initial" bSlot="0">
         <varRef role="select" name="instanceXML" slot="2"/>
        </applyT>
       </let>
      </doc>
      <let line="2031" var="xforms-doc" as="item()?" slot="3" eval="8">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getXFormsDoc"/>
        <arrayBlock/>
       </ifCall>
       <sequence line="2033">
        <message>
         <sequence role="select">
          <valueOf>
           <str val=" instanceXML XXX= "/>
          </valueOf>
          <valueOf line="2034">
           <fn name="serialize">
            <varRef name="updatedInstanceXML" slot="1"/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <forEach line="2039">
         <ifCall line="2018" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
          <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:keys">
           <check card="1" diag="0|0||map:keys">
            <varRef name="action-map" slot="0"/>
           </check>
          </treat>
         </ifCall>
         <choose line="2042">
          <gc op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
           <dot type="xs:anyAtomicType"/>
           <str val="insert"/>
          </gc>
          <let line="2071" var="vv:v1" as="item()" slot="4" eval="13">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <let line="2057" var="vv:v0" as="xs:string" slot="5" eval="13">
            <fn name="serialize">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
               <check card="1" diag="0|0||map:get">
                <varRef name="action-map" slot="0"/>
               </check>
              </treat>
              <str val="insert"/>
             </ifCall>
            </fn>
            <forEach line="2048">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
              <ifCall line="2045" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                 <check card="1" diag="0|0||map:get">
                  <varRef name="action-map" slot="0"/>
                 </check>
                </treat>
                <str val="insert"/>
               </ifCall>
              </ifCall>
             </ifCall>
             <let line="2050" var="map-ref" as="item()*" slot="6" eval="3">
              <let var="vv:LHS294658058" as="function(*)" slot="7" eval="7">
               <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS294658058">
                <dot/>
               </treat>
               <choose>
                <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                 <varRef name="vv:LHS294658058" slot="7"/>
                </instance>
                <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                 <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                  <varRef name="vv:LHS294658058" slot="7"/>
                 </treat>
                 <str val="ref"/>
                </ifCall>
                <true/>
                <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
               </choose>
              </let>
              <let line="2102" var="vv:v4" as="xs:anyAtomicType*" slot="8" eval="4">
               <data>
                <varRef name="map-ref" slot="6"/>
               </data>
               <let line="2076" var="vv:v3" as="xs:anyAtomicType*" slot="9" eval="4">
                <data>
                 <varRef name="map-ref" slot="6"/>
                </data>
                <let line="2073" var="vv:v2" as="xs:anyAtomicType*" slot="10" eval="4">
                 <data>
                  <varRef name="map-ref" slot="6"/>
                 </data>
                 <let line="2051" var="insert-node" as="node()" slot="11" eval="7">
                  <treat line="2054" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|insert-node">
                   <check card="1" diag="3|0|XTTE0570|insert-node">
                    <evaluate dxns="">
                     <fn role="xpath" name="concat">
                      <atomSing card="?" diag="0|0||fn:concat">
                       <varRef name="map-ref" slot="6"/>
                      </atomSing>
                      <str val="["/>
                      <str val="last()"/>
                      <str val="]"/>
                     </fn>
                     <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                     <str role="sa" val="no"/>
                     <map role="wp" size="0"/>
                    </evaluate>
                   </check>
                  </treat>
                  <sequence line="2056">
                   <message>
                    <sequence role="select">
                     <valueOf>
                      <str val="insert found !!!! insert = "/>
                     </valueOf>
                     <valueOf line="2057">
                      <varRef name="vv:v0" slot="5"/>
                     </valueOf>
                     <valueOf>
                      <str val=" ref = "/>
                     </valueOf>
                     <valueOf line="2058">
                      <fn name="string-join">
                       <convert from="xs:anyAtomicType" to="xs:string">
                        <data>
                         <mergeAdj>
                          <varRef name="map-ref" slot="6"/>
                         </mergeAdj>
                        </data>
                       </convert>
                       <str val=" "/>
                      </fn>
                     </valueOf>
                    </sequence>
                    <str role="terminate" val="no"/>
                    <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                   </message>
                   <let line="2061" var="instance-with-insert" as="document-node()" slot="12" eval="7">
                    <doc line="2063" validation="preserve">
                     <applyT mode="Q{}insert-node" bSlot="1">
                      <varRef role="select" name="updatedInstanceXML" slot="1"/>
                      <withParam name="Q{}insert-node" as="node()">
                       <varRef line="2064" name="insert-node" slot="11"/>
                      </withParam>
                      <withParam name="Q{}path" as="xs:string">
                       <fn line="2066" name="concat">
                        <str val="/"/>
                        <atomSing card="?" diag="0|1||fn:concat">
                         <varRef name="map-ref" slot="6"/>
                        </atomSing>
                       </fn>
                      </withParam>
                     </applyT>
                    </doc>
                    <sequence line="2071">
                     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                      <varRef name="vv:v1" slot="4"/>
                      <str val="setInstance"/>
                      <arrayBlock>
                       <varRef name="instance-with-insert" slot="12"/>
                      </arrayBlock>
                     </ifCall>
                     <let line="2073" var="node-to-copyi" as="element(Q{}div)" slot="13" eval="7">
                      <check card="1" diag="3|0|XTTE0570|node-to-copyi">
                       <docOrder intra="1">
                        <filter flags="b">
                         <slash>
                          <slash>
                           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                           <fn name="key">
                            <str val="Q{http://saxon.sf.net/}kk103"/>
                            <varRef name="vv:v2" slot="10"/>
                            <dot type="document-node()"/>
                           </fn>
                          </slash>
                          <axis name="child" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                         </slash>
                         <fn name="empty">
                          <axis module="saxon-xforms.xsl" line="2073" name="following-sibling" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                         </fn>
                        </filter>
                       </docOrder>
                      </check>
                      <let line="2076" var="newNodePosition" as="xs:integer" slot="14" eval="7">
                       <arith op="+" calc="i+i">
                        <fn name="count">
                         <docOrder intra="1">
                          <slash>
                           <slash>
                            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                            <fn name="key">
                             <str val="Q{http://saxon.sf.net/}kk103"/>
                             <varRef name="vv:v3" slot="9"/>
                             <dot type="document-node()"/>
                            </fn>
                           </slash>
                           <axis name="child" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                          </slash>
                         </docOrder>
                        </fn>
                        <int val="1"/>
                       </arith>
                       <let line="2078" var="newNodeCPath" as="xs:string" slot="15" eval="7">
                        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|newNodeCPath">
                         <check card="1" diag="3|0|XTTE0570|newNodeCPath">
                          <cvUntyped to="xs:string">
                           <data>
                            <varRef name="map-ref" slot="6"/>
                           </data>
                          </cvUntyped>
                         </check>
                        </treat>
                        <let line="2081" var="path-updated" as="xs:string" slot="16" eval="7">
                         <choose>
                          <compareToInt op="gt" val="0">
                           <varRef name="newNodePosition" slot="14"/>
                          </compareToInt>
                          <fn name="concat">
                           <varRef name="newNodeCPath" slot="15"/>
                           <str val="["/>
                           <varRef name="newNodePosition" slot="14"/>
                           <str val="]"/>
                          </fn>
                          <true/>
                          <varRef name="newNodeCPath" slot="15"/>
                         </choose>
                         <let line="2088" var="copied-node" as="node()" slot="17" eval="7">
                          <treat line="2089" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|copied-node">
                           <check card="1" diag="3|0|XTTE0570|copied-node">
                            <applyT mode="Q{}update-ref" bSlot="2">
                             <varRef role="select" name="node-to-copyi" slot="13"/>
                             <withParam name="Q{}path">
                              <varRef line="2090" name="map-ref" slot="6"/>
                             </withParam>
                             <withParam name="Q{}position" as="xs:integer">
                              <varRef line="2091" name="newNodePosition" slot="14"/>
                             </withParam>
                            </applyT>
                           </check>
                          </treat>
                          <sequence line="2097">
                           <message>
                            <sequence role="select">
                             <valueOf>
                              <str val="node to copy= "/>
                             </valueOf>
                             <valueOf>
                              <fn name="serialize">
                               <varRef name="node-to-copyi" slot="13"/>
                              </fn>
                             </valueOf>
                             <valueOf>
                              <str val="&#xA;                            node to copy with updated ref = "/>
                             </valueOf>
                             <valueOf line="2098">
                              <fn name="serialize">
                               <varRef name="copied-node" slot="17"/>
                              </fn>
                             </valueOf>
                            </sequence>
                            <str role="terminate" val="no"/>
                            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                           </message>
                           <forEach line="2102">
                            <slash>
                             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                             <fn name="key">
                              <str val="Q{http://saxon.sf.net/}kk103"/>
                              <varRef name="vv:v4" slot="8"/>
                              <dot type="document-node()"/>
                             </fn>
                            </slash>
                            <resultDoc line="2104" global="#&#xD;&#xA;#Fri Jun 22 18:52:20 BST 2018&#xD;&#xA;indent=no&#xD;&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xD;&#xA;encoding=utf-8&#xD;&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xD;&#xA;omit-xml-declaration=no&#xD;&#xA;method=html&#xD;&#xA;" local="#&#xD;&#xA;#Fri Jun 22 18:52:20 BST 2018&#xD;&#xA;method={http\://saxonica.com/ns/interactiveXSLT}append-content&#xD;&#xA;">
                             <str role="href" val="?."/>
                             <copyOf role="content" line="2105" flags="vc">
                              <varRef name="copied-node" slot="17"/>
                             </copyOf>
                            </resultDoc>
                           </forEach>
                           <forEach line="2113">
                            <filter line="2112" flags="b">
                             <slash simple="1">
                              <varRef name="node-to-copyi" slot="13"/>
                              <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                             </slash>
                             <or op="or">
                              <fn name="exists">
                               <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                              </fn>
                              <fn name="exists">
                               <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
                              </fn>
                             </or>
                            </filter>
                            <let line="2115" var="dataActionRef" as="xs:string?" slot="18" eval="8">
                             <cvUntyped to="xs:string">
                              <attVal name="Q{}data-action" chk="0"/>
                             </cvUntyped>
                             <choose line="2117">
                              <fn name="exists">
                               <varRef name="dataActionRef" slot="18"/>
                              </fn>
                              <let line="2119" var="actionEvents" as="map(*)?" slot="19" eval="7">
                               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actionEvents">
                                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                 <check card="1" diag="0|0||ixsl:call">
                                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                 </check>
                                 <str val="getAction"/>
                                 <arrayBlock>
                                  <fn name="string">
                                   <varRef name="dataActionRef" slot="18"/>
                                  </fn>
                                 </arrayBlock>
                                </ifCall>
                               </treat>
                               <let line="2123" var="dataRefForNewNode" as="xs:string?" slot="20" eval="7">
                                <check card="?" diag="3|0|XTTE0570|dataRefForNewNode">
                                 <cvUntyped to="xs:string">
                                  <data>
                                   <slash>
                                    <filter flags="b">
                                     <slash simple="1">
                                      <varRef name="copied-node" slot="17"/>
                                      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                                     </slash>
                                     <gc op="=" card="1:1" comp="CCC">
                                      <attVal name="Q{}data-old-action" chk="0"/>
                                      <varRef name="dataActionRef" slot="18"/>
                                     </gc>
                                    </filter>
                                    <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                                   </slash>
                                  </data>
                                 </cvUntyped>
                                </check>
                                <ifCall line="2152" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                 <check card="1" diag="0|0||ixsl:call">
                                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                 </check>
                                 <str val="addAction"/>
                                 <arrayBlock>
                                  <check line="2122" card="1" diag="3|0|XTTE0570|newActionId">
                                   <cvUntyped to="xs:string">
                                    <data>
                                     <slash>
                                      <filter flags="b">
                                       <slash simple="1">
                                        <varRef name="copied-node" slot="17"/>
                                        <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                                       </slash>
                                       <gc op="=" card="1:1" comp="CCC">
                                        <attVal name="Q{}data-old-action" chk="0"/>
                                        <varRef name="dataActionRef" slot="18"/>
                                       </gc>
                                      </filter>
                                      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
                                     </slash>
                                    </data>
                                   </cvUntyped>
                                  </check>
                                  <forEach line="2126">
                                   <varRef name="actionEvents" slot="19"/>
                                   <let line="2127" var="myContext" as="map(*)" slot="21" eval="7">
                                    <dot type="map(*)"/>
                                    <let line="2129" var="refExsists" as="xs:boolean" slot="22" eval="8">
                                     <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                                      <varRef name="myContext" slot="21"/>
                                      <str val="@ref"/>
                                     </ifCall>
                                     <choose line="2132">
                                      <and op="and">
                                       <varRef name="refExsists" slot="22"/>
                                       <fn name="exists">
                                        <varRef name="dataRefForNewNode" slot="20"/>
                                       </fn>
                                      </and>
                                      <ifCall line="2135" name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                       <varRef name="myContext" slot="21"/>
                                       <str val="@ref"/>
                                       <fn name="string">
                                        <varRef name="dataRefForNewNode" slot="20"/>
                                       </fn>
                                      </ifCall>
                                      <varRef line="2137" name="refExsists" slot="22"/>
                                      <ifCall line="2141" name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                       <varRef name="myContext" slot="21"/>
                                       <str val="@ref"/>
                                       <fn line="2139" name="concat">
                                        <varRef name="path-updated" slot="16"/>
                                        <fn line="2138" name="substring">
                                         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|contextRef">
                                          <check card="1" diag="3|0|XTTE0570|contextRef">
                                           <cvUntyped to="xs:string">
                                            <data>
                                             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                              <varRef name="myContext" slot="21"/>
                                              <str val="@ref"/>
                                             </ifCall>
                                            </data>
                                           </cvUntyped>
                                          </check>
                                         </treat>
                                         <arith line="2139" op="+" calc="i+i">
                                          <fn name="string-length">
                                           <varRef name="path-updated" slot="16"/>
                                          </fn>
                                          <int val="1"/>
                                         </arith>
                                        </fn>
                                       </fn>
                                      </ifCall>
                                      <true/>
                                      <dot line="2144" type="map(*)"/>
                                     </choose>
                                    </let>
                                   </let>
                                  </forEach>
                                 </arrayBlock>
                                </ifCall>
                               </let>
                              </let>
                             </choose>
                            </let>
                           </forEach>
                          </sequence>
                         </let>
                        </let>
                       </let>
                      </let>
                     </let>
                    </sequence>
                   </let>
                  </sequence>
                 </let>
                </let>
               </let>
              </let>
             </let>
            </forEach>
           </let>
          </let>
          <gc line="2160" op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
           <dot type="xs:anyAtomicType"/>
           <str val="delete"/>
          </gc>
          <let line="2166" var="action-refi" as="xs:string?" slot="23" eval="7">
           <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|action-refi">
            <check card="?" diag="3|0|XTTE0570|action-refi">
             <cvUntyped to="xs:string">
              <data>
               <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                 <check card="1" diag="0|0||map:get">
                  <varRef name="action-map" slot="0"/>
                 </check>
                </treat>
                <str val="@ref"/>
               </ifCall>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <forEach line="2168">
            <ifCall line="2163" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
               <check card="1" diag="0|0||map:get">
                <varRef name="action-map" slot="0"/>
               </check>
              </treat>
              <str val="delete"/>
             </ifCall>
            </ifCall>
            <let line="2169" var="if-clause" as="xs:string" slot="24" eval="7">
             <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|if-clause">
              <check card="1" diag="3|0|XTTE0570|if-clause">
               <cvUntyped to="xs:string">
                <let var="vv:LHS1781493632" as="function(*)" slot="25" eval="7">
                 <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1781493632">
                  <dot/>
                 </treat>
                 <choose>
                  <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                   <varRef name="vv:LHS1781493632" slot="25"/>
                  </instance>
                  <data>
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <treat module="saxon-xforms.xsl" line="2169" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                     <varRef name="vv:LHS1781493632" slot="25"/>
                    </treat>
                    <str val="if"/>
                   </ifCall>
                  </data>
                  <true/>
                  <data>
                   <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                  </data>
                 </choose>
                </let>
               </cvUntyped>
              </check>
             </treat>
             <let line="2170" var="delete-ref" as="xs:string" slot="26" eval="7">
              <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|delete-ref">
               <check card="1" diag="3|0|XTTE0570|delete-ref">
                <cvUntyped to="xs:string">
                 <let var="vv:LHS1169474473" as="function(*)" slot="27" eval="7">
                  <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1169474473">
                   <dot/>
                  </treat>
                  <choose>
                   <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                    <varRef name="vv:LHS1169474473" slot="27"/>
                   </instance>
                   <data>
                    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                     <treat module="saxon-xforms.xsl" line="2170" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                      <varRef name="vv:LHS1169474473" slot="27"/>
                     </treat>
                     <str val="ref"/>
                    </ifCall>
                   </data>
                   <true/>
                   <data>
                    <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                   </data>
                  </choose>
                 </let>
                </cvUntyped>
               </check>
              </treat>
              <let line="2172" var="if-statement" as="xs:boolean" slot="28" eval="7">
               <choose line="2174">
                <fn name="empty">
                 <varRef name="if-clause" slot="24"/>
                </fn>
                <true/>
                <true/>
                <treat line="2177" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|if-statement">
                 <check card="1" diag="3|0|XTTE0570|if-statement">
                  <cvUntyped to="xs:boolean">
                   <data>
                    <evaluate dxns="">
                     <varRef role="xpath" name="if-clause" slot="24"/>
                     <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                     <str role="sa" val="no"/>
                     <map role="wp" size="0"/>
                    </evaluate>
                   </data>
                  </cvUntyped>
                 </check>
                </treat>
               </choose>
               <choose line="2186">
                <varRef name="if-statement" slot="28"/>
                <let line="2187" var="instance-with-delete" as="document-node()" slot="29" eval="7">
                 <doc line="2189" validation="preserve">
                  <applyT mode="Q{}delete-node" bSlot="3">
                   <varRef role="select" name="updatedInstanceXML" slot="1"/>
                   <withParam name="Q{}path" as="xs:string">
                    <choose line="2183">
                     <vc op="eq" onEmpty="0" comp="CCC">
                      <varRef name="delete-ref" slot="26"/>
                      <str val="."/>
                     </vc>
                     <fn name="concat">
                      <str val="/"/>
                      <varRef name="action-refi" slot="23"/>
                     </fn>
                     <true/>
                     <fn name="concat">
                      <choose>
                       <fn name="exists">
                        <varRef name="action-refi" slot="23"/>
                       </fn>
                       <fn name="concat">
                        <str val="/"/>
                        <varRef name="action-refi" slot="23"/>
                       </fn>
                       <true/>
                       <str val=""/>
                      </choose>
                      <str val="/"/>
                      <varRef name="delete-ref" slot="26"/>
                     </fn>
                    </choose>
                   </withParam>
                  </applyT>
                 </doc>
                 <sequence line="2198">
                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                   <check card="1" diag="0|0||ixsl:call">
                    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                   </check>
                   <str val="setInstance"/>
                   <arrayBlock>
                    <varRef name="instance-with-delete" slot="29"/>
                   </arrayBlock>
                  </ifCall>
                  <callT line="2211" name="xformsjs-main" bSlot="4">
                   <withParam name="Q{}xforms-doc" flags="c" as="document-node()?">
                    <treat line="2212" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|xforms-doc">
                     <varRef name="xforms-doc" slot="3"/>
                    </treat>
                   </withParam>
                   <withParam name="Q{}instance-xml" flags="c" as="document-node()">
                    <varRef line="2213" name="instance-with-delete" slot="29"/>
                   </withParam>
                   <withParam name="Q{}xFormsId" flags="c" as="xs:string">
                    <treat line="2214" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xFormsId">
                     <check card="1" diag="8|0|XTTE0590|xFormsId">
                      <cvUntyped to="xs:string">
                       <data>
                        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                         <check card="1" diag="0|0||ixsl:call">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                         </check>
                         <str val="getXFormsID"/>
                         <arrayBlock/>
                        </ifCall>
                       </data>
                      </cvUntyped>
                     </check>
                    </treat>
                   </withParam>
                  </callT>
                 </sequence>
                </let>
               </choose>
              </let>
             </let>
            </let>
           </forEach>
          </let>
          <gc line="2225" op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
           <dot type="xs:anyAtomicType"/>
           <str val="reset"/>
          </gc>
          <message line="2226">
           <valueOf role="select">
            <str val="reset found !!!!"/>
           </valueOf>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
         </choose>
        </forEach>
       </sequence>
      </let>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="5" flags="s" line="930" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="930" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-submit)" jsTest="return item.name==='data-submit'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="932" var="instanceXML" as="document-node(element(Q{}Document))" slot="0" eval="7">
     <treat as="document-node(element(Q{}Document))" jsTest="function e(item) {var q=SaxonJS.U.nameOfNode(item); return q.uri===''&amp;&amp;q.local==='Document';};return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9 || item.nodeType===11) &amp;&amp; SaxonJS.U.Axis.child(item).filter(e).next();" diag="3|0|XTTE0570|instanceXML">
      <check card="1" diag="3|0|XTTE0570|instanceXML">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getInstance"/>
        <arrayBlock/>
       </ifCall>
      </check>
     </treat>
     <let line="937" var="updatedInstanceXML" as="document-node(element(Q{}Document))" slot="1" eval="7">
      <treat line="939" as="document-node(element(Q{}Document))" jsTest="function e(item) {var q=SaxonJS.U.nameOfNode(item); return q.uri===''&amp;&amp;q.local==='Document';};return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9 || item.nodeType===11) &amp;&amp; SaxonJS.U.Axis.child(item).filter(e).next();" diag="3|0|XTTE0570|updatedInstanceXML">
       <doc>
        <applyT mode="Q{}form-check-initial" bSlot="5">
         <varRef role="select" name="instanceXML" slot="0"/>
        </applyT>
       </doc>
      </treat>
      <let line="945" var="required-fieldsi" as="element()*" slot="2" eval="8">
       <filter flags="b">
        <slash simple="1">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
         <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}data-required)" jsTest="return item.name==='data-required'"/>
        </fn>
       </filter>
       <let line="948" var="required-fields-check" as="item()*" slot="3" eval="3">
        <ufCall name="Q{http://www.w3.org/2002/xforms}check-required-fields" tailCall="false" bSlot="6" eval="6">
         <varRef name="updatedInstanceXML" slot="1"/>
        </ufCall>
        <let line="953" var="action" as="document-node()" slot="4" eval="7">
         <doc line="958" flags="t" validation="preserve">
          <valueOf flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}data-submit" chk="0"/>
           </convert>
          </valueOf>
         </doc>
         <choose line="971">
          <fn name="empty">
           <varRef name="required-fields-check" slot="3"/>
          </fn>
          <sequence line="975">
           <message>
            <sequence role="select">
             <valueOf>
              <str val="&#xA;                    Sending HTTP request to '"/>
             </valueOf>
             <valueOf line="976">
              <convert from="xs:untypedAtomic" to="xs:string">
               <data>
                <varRef name="action" slot="4"/>
               </data>
              </convert>
             </valueOf>
             <valueOf>
              <str val="'&#xA;                "/>
             </valueOf>
            </sequence>
            <str role="terminate" val="no"/>
            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
           </message>
           <ifCall line="988" name="Q{http://saxonica.com/ns/interactiveXSLT}schedule-action" type="item()*">
            <int val="0"/>
            <empty/>
            <callT name="HTTPsubmit" bSlot="7"/>
            <ifCall line="983" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
             <sequence>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
               <str val="body"/>
               <treat line="964" as="document-node(element(Q{}submit))" jsTest="function e(item) {var q=SaxonJS.U.nameOfNode(item); return q.uri===''&amp;&amp;q.local==='submit';};return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9 || item.nodeType===11) &amp;&amp; SaxonJS.U.Axis.child(item).filter(e).next();" diag="3|0|XTTE0570|requestBody">
                <doc>
                 <elem name="submit" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                  <slash simple="1">
                   <varRef name="updatedInstanceXML" slot="1"/>
                   <axis name="child" nodeTest="element(Q{}Document)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='Document';"/>
                  </slash>
                 </elem>
                </doc>
               </treat>
              </ifCall>
              <map size="1">
               <str val="method"/>
               <str val="POST"/>
              </map>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
               <str val="href"/>
               <varRef name="action" slot="4"/>
              </ifCall>
              <map size="1">
               <str val="media-type"/>
               <str val="application/xml"/>
              </map>
             </sequence>
             <map size="2">
              <str val="duplicates"/>
              <str val="reject"/>
              <str val="duplicates-error-code"/>
              <str val="XQDY0137"/>
             </map>
            </ifCall>
           </ifCall>
          </sequence>
          <true/>
          <ifCall line="1004" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="alert"/>
           <arrayBlock>
            <fn name="serialize">
             <doc line="995" flags="t" validation="preserve">
              <forEach>
               <varRef name="required-fields-check" slot="3"/>
               <valueOf line="999" flags="l">
                <fn name="concat">
                 <str val="Value error see: "/>
                 <fn name="serialize">
                  <slash simple="1">
                   <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                    <dot line="996"/>
                   </treat>
                   <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                  </slash>
                 </fn>
                 <str val="&#xA;"/>
                </fn>
               </valueOf>
              </forEach>
             </doc>
            </fn>
           </arrayBlock>
          </ifCall>
         </choose>
        </let>
       </let>
      </let>
     </let>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id="38" binds="39">
  <template name="Q{}getBinding" flags="os" line="3195" module="saxon-xforms.xsl" slots="3">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3196">
    <param name="Q{}this" slot="0" flags="r" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="3197" name="Q{}bindings" slot="1" flags="ti" as="map(xs:string, node())">
     <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
      <check card="1" diag="8|0|XTTE0590|bindings">
       <supplied slot="1"/>
      </check>
     </treat>
    </param>
    <let line="3199" var="ref-binding" as="xs:string" slot="2" eval="7">
     <treat line="3200" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|ref-binding">
      <check card="1" diag="3|0|XTTE0570|ref-binding">
       <cvUntyped to="xs:string">
        <data>
         <callT name="getBindingRef" bSlot="0">
          <withParam name="Q{}this" flags="c" as="element()">
           <treat line="3201" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
            <dot flags="a"/>
           </treat>
          </withParam>
         </callT>
        </data>
       </cvUntyped>
      </check>
     </treat>
     <choose line="3209">
      <fn name="empty">
       <varRef name="ref-binding" slot="2"/>
      </fn>
      <empty/>
      <true/>
      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
       <varRef name="bindings" slot="1"/>
       <varRef name="ref-binding" slot="2"/>
      </ifCall>
     </choose>
    </let>
   </sequence>
  </template>
 </co>
 <co id="31" vis="PUBLIC" binds="">
  <globalParam name="Q{}xforms-cache-id" type="item()*" line="25" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-cache"/>
  </globalParam>
 </co>
 <co id="39" binds="">
  <template name="Q{}getBindingRef" flags="os" line="3213" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3214">
    <param name="Q{}this" slot="0" flags="r" as="element()">
     <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|this">
      <check card="1" diag="8|0|XTTE0590|this">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <choose line="3217">
     <fn name="exists">
      <slash simple="1">
       <varRef name="this" slot="0"/>
       <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
      </slash>
     </fn>
     <valueOf line="3218">
      <convert from="xs:untypedAtomic" to="xs:string">
       <data>
        <slash simple="1">
         <varRef name="this" slot="0"/>
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </slash>
       </data>
      </convert>
     </valueOf>
     <fn line="3220" name="exists">
      <slash simple="1">
       <varRef name="this" slot="0"/>
       <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
      </slash>
     </fn>
     <valueOf line="3221">
      <convert from="xs:untypedAtomic" to="xs:string">
       <data>
        <slash simple="1">
         <varRef name="this" slot="0"/>
         <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
        </slash>
       </data>
      </convert>
     </valueOf>
     <true/>
     <valueOf line="3224" flags="S">
      <str val=""/>
     </valueOf>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="40" binds="41">
  <function name="Q{http://www.w3.org/2002/xforms}impose" line="19" module="xforms-function-library.xsl" eval="8" flags="pU" as="xs:string" slots="2">
   <arg name="input" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="25" var="vv:v0" as="xs:anyAtomicType*" slot="1" eval="4">
    <data>
     <gVarRef name="Q{}xform-functions" bSlot="0"/>
    </data>
    <fn line="40" name="string-join">
     <analyzeString line="22">
      <varRef role="select" name="input" slot="0"/>
      <str role="regex" val="\i\c*\("/>
      <str role="flags" val=""/>
      <choose role="matching" line="25">
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <varRef name="vv:v0" slot="1"/>
        <fn name="substring-before">
         <dot type="xs:string"/>
         <str val="("/>
        </fn>
       </gc>
       <fn line="26" name="concat">
        <str val="xforms:"/>
        <dot type="xs:string"/>
       </fn>
       <true/>
       <dot line="29" type="xs:string"/>
      </choose>
      <dot role="nonMatching" line="34" type="xs:string"/>
     </analyzeString>
    </fn>
   </let>
  </function>
 </co>
 <co id="41" binds="">
  <globalVariable name="Q{}xform-functions" type="item()+" line="17" module="xforms-function-library.xsl" visibility="PRIVATE" jsAcceptor="return val;" jsCardCheck="function c(n) {return n&gt;=1;};">
   <sequence ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="17">
    <literal count="4">
     <str val="index"/>
     <str val="avg"/>
     <str val="foo"/>
     <str val="current-date"/>
    </literal>
    <slash simple="1">
     <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
      <dot flags="a"/>
     </treat>
     <axis name="child" nodeTest="element(Q{}random)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='random';"/>
    </slash>
   </sequence>
  </globalVariable>
 </co>
 <co id="42" binds="">
  <globalVariable name="Q{}debugTiming" type="xs:boolean" line="28" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <false/>
  </globalVariable>
 </co>
 <co id="20" binds="20 20 20">
  <mode name="Q{}jxml-xml" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="2" flags="s" line="2916" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:array" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='array'"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2917" var="keyVar" as="attribute(Q{}key)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}key)" jsTest="return item.name==='key'"/>
     <let line="2920" var="vv:v0" as="xs:string" slot="1" eval="13">
      <fn name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <varRef name="keyVar" slot="0"/>
        </data>
       </convert>
      </fn>
      <forEach line="2919">
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       <compElem line="2920">
        <varRef role="name" name="vv:v0" slot="1"/>
        <applyT role="content" line="2921" mode="Q{}jxml-xml" bSlot="0">
         <dot role="select" type="element()"/>
        </applyT>
       </compElem>
      </forEach>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2902" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:number" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='number'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2904">
     <fn name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2905">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <fn role="select" name="string-join">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <mergeAdj>
          <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </compAtt>
     <true/>
     <compElem line="2908">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <valueOf role="content" line="2909" flags="l">
       <fn name="string-join">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <mergeAdj>
           <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
      </valueOf>
     </compElem>
    </choose>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2902" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:string" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='string'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2904">
     <fn name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2905">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <fn role="select" name="string-join">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <mergeAdj>
          <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </compAtt>
     <true/>
     <compElem line="2908">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <valueOf role="content" line="2909" flags="l">
       <fn name="string-join">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <mergeAdj>
           <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
      </valueOf>
     </compElem>
    </choose>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="0" flags="s" line="2878" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:map" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='map'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2880">
     <fn name="empty">
      <axis name="attribute" nodeTest="attribute(Q{}key)" jsTest="return item.name==='key'"/>
     </fn>
     <applyT line="2882" mode="Q{}jxml-xml" flags="t" bSlot="1">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </applyT>
     <fn line="2887" name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2888">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <convert role="select" from="xs:untypedAtomic" to="xs:string">
       <data>
        <dot type="*:map"/>
       </data>
      </convert>
     </compAtt>
     <true/>
     <compElem line="2891">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <applyT role="content" line="2892" mode="Q{}jxml-xml" bSlot="2">
       <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </applyT>
     </compElem>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="43" binds="16 14">
  <template name="Q{}main" flags="os" line="23" module="sample3.xsl" slots="0">
   <ifCall role="body" ns="xsl=~ xforms=http://www.w3.org/2002/xforms array=http://www.w3.org/2005/xpath-functions/array f=http://www.saxonica.com/local/functions ixsl=~ js=~ xs=~ saxon=~ map=http://www.w3.org/2005/xpath-functions/map" line="26" name="Q{http://saxonica.com/ns/interactiveXSLT}schedule-action" type="item()*">
    <int val="0"/>
    <gVarRef name="Q{}sampleForm" bSlot="0"/>
    <callT line="27" name="main2" bSlot="1"/>
   </ifCall>
  </template>
 </co>
 <co id="4" binds="">
  <template name="Q{}getInstance" flags="os" as="element()?" line="3178" module="saxon-xforms.xsl" slots="2">
   <check role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3179" card="?" diag="7|0|XTTE0505|getInstance">
    <sequence>
     <param name="Q{}instance-id" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|instance-id">
       <check card="1" diag="8|0|XTTE0590|instance-id">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="3180" name="Q{}instances" slot="1" flags="t" as="element()*">
      <empty role="select"/>
      <treat role="conversion" as="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;" diag="8|0|XTTE0590|instances">
       <supplied slot="1"/>
      </treat>
     </param>
     <choose line="3184">
      <varRef name="instance-id" slot="0"/>
      <docOrder line="3185" intra="0">
       <slash>
        <filter flags="b">
         <varRef name="instances" slot="1"/>
         <gc op="=" card="1:1" comp="CCC">
          <attVal name="Q{}id" chk="0"/>
          <varRef name="instance-id" slot="0"/>
         </gc>
        </filter>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </slash>
      </docOrder>
      <true/>
      <copyOf line="3190" flags="vc">
       <slash simple="1">
        <first>
         <varRef name="instances" slot="1"/>
        </first>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </slash>
      </copyOf>
     </choose>
    </sequence>
   </check>
  </template>
 </co>
 <co id="37" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-required-fields" line="872" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="3">
   <arg name="updatedInstanceXML" as="document-node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="875" var="required-fieldsi" as="element()*" slot="1" eval="8">
    <filter flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-required)" jsTest="return item.name==='data-required'"/>
     </fn>
    </filter>
    <forEach line="879">
     <varRef name="required-fieldsi" slot="1"/>
     <let line="881" var="resulti" as="document-node()" slot="2" eval="7">
      <doc line="884" validation="preserve">
       <evaluate dxns="">
        <fn role="xpath" name="concat">
         <str val="boolean(normalize-space("/>
         <attVal name="Q{}data-ref" chk="0"/>
         <str val="))"/>
         <str val="="/>
         <attVal name="Q{}data-ref" chk="0"/>
         <str val="/"/>
         <attVal name="Q{}data-required" chk="0"/>
        </fn>
        <varRef role="cxt" name="updatedInstanceXML" slot="0"/>
        <str role="sa" val="no"/>
        <map role="wp" size="0"/>
       </evaluate>
      </doc>
      <choose line="892">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="resulti" slot="2"/>
         </data>
        </cast>
        <str val="false"/>
       </vc>
       <dot type="element()"/>
      </choose>
     </let>
    </forEach>
   </let>
  </function>
 </co>
 <co id="23" binds="23 23 23">
  <mode name="Q{}json-xml" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="2798" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2803">
     <fn name="exists">
      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </fn>
     <forEachGroup line="2804" algorithm="by">
      <sequence role="select">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </sequence>
      <fn role="key" name="local-name">
       <dot type="node()"/>
      </fn>
      <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
      <choose role="content" line="2806">
       <fn name="exists">
        <tail start="2">
         <currentGroup/>
        </tail>
       </fn>
       <elem line="2809" name="array" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <currentGroupingKey/>
           </convert>
           <str val=" "/>
          </fn>
         </att>
         <forEach line="2810">
          <currentGroup/>
          <elem line="2813" name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="dl">
           <applyT mode="Q{}json-xml" bSlot="0">
            <dot role="select"/>
           </applyT>
          </elem>
         </forEach>
        </sequence>
       </elem>
       <filter line="2820" flags="b">
        <currentGroup/>
        <fn name="exists">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|12|XPTY0020|">
           <dot/>
          </treat>
          <axis name="self" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         </slash>
        </fn>
       </filter>
       <elem line="2825" name="string" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="concat">
           <str val="@"/>
           <check card="?" diag="0|1||fn:concat">
            <currentGroupingKey/>
           </check>
          </fn>
         </att>
         <valueOf line="2826" flags="l">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <dot type="node()"/>
           </data>
          </convert>
         </valueOf>
        </sequence>
       </elem>
       <fn line="2831" name="exists">
        <slash>
         <currentGroup/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </fn>
       <elem line="2834" name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <currentGroupingKey/>
           </convert>
           <str val=" "/>
          </fn>
         </att>
         <applyT line="2835" mode="Q{}json-xml" bSlot="1">
          <currentGroup role="select"/>
         </applyT>
        </sequence>
       </elem>
       <true/>
       <applyT line="2840" mode="Q{}json-xml" bSlot="2">
        <currentGroup role="select"/>
       </applyT>
      </choose>
     </forEachGroup>
     <fn line="2846" name="matches">
      <cvUntyped to="xs:string">
       <data>
        <dot type="element()"/>
       </data>
      </cvUntyped>
      <str val="^[0-9]+$"/>
      <str val=""/>
     </fn>
     <elem line="2848" name="number" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
      <sequence>
       <att name="key" flags="l">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </att>
       <valueOf line="2849" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <mergeAdj>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </mergeAdj>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
     <true/>
     <elem line="2854" name="string" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
      <sequence>
       <att name="key" flags="l">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </att>
       <valueOf line="2855" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <mergeAdj>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </mergeAdj>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="44" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}index" line="50" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:integer" slots="2">
   <arg name="repeatID" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="52" var="element" as="item()?" slot="1" eval="8">
    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <str val="getElementById"/>
     <arrayBlock>
      <varRef name="repeatID" slot="0"/>
     </arrayBlock>
    </ifCall>
    <choose line="54">
     <fn name="empty">
      <varRef name="element" slot="1"/>
     </fn>
     <int val="0"/>
     <fn line="58" name="exists">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
        <varRef name="element" slot="1"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{}data-repeatable-context)" jsTest="return item.name==='data-repeatable-context'"/>
      </slash>
     </fn>
     <fn line="59" name="count">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
        <varRef name="element" slot="1"/>
       </treat>
       <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
     </fn>
     <true/>
     <int val="0"/>
    </choose>
   </let>
  </function>
 </co>
 <co id="36" binds="36">
  <mode name="Q{}delete-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="7" flags="s" line="1920" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1921">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1922" name="Q{}current-path" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|current-path">
       <check card="1" diag="8|0|XTTE0590|current-path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1928" var="updatedPath2" as="document-node()" slot="2" eval="7">
      <doc line="1929" flags="t" validation="preserve">
       <sequence>
        <valueOf flags="l">
         <fn line="1923" name="concat">
          <varRef name="current-path" slot="1"/>
          <str val="/"/>
          <fn name="local-name">
           <dot type="element()"/>
          </fn>
         </fn>
        </valueOf>
        <choose line="1931">
         <fn name="exists">
          <let var="vv:current-28121473" as="element()" slot="3" eval="7">
           <dot type="element()"/>
           <let var="vv:v0" as="xs:string" slot="4" eval="13">
            <fn name="local-name">
             <varRef name="vv:current-28121473" slot="3"/>
            </fn>
            <filter flags="b">
             <union op="|">
              <fn name="reverse">
               <slash simple="1">
                <dot type="element()"/>
                <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               </slash>
              </fn>
              <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </union>
             <vc op="eq" comp="CCC">
              <fn name="local-name">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v0" slot="4"/>
             </vc>
            </filter>
           </let>
          </let>
         </fn>
         <valueOf line="1932" flags="l">
          <fn name="concat">
           <str val="["/>
           <let line="1927" var="vv:current585323788" as="element()" slot="5" eval="7">
            <dot type="element()"/>
            <let var="vv:v1" as="xs:string" slot="6" eval="13">
             <fn name="local-name">
              <varRef name="vv:current585323788" slot="5"/>
             </fn>
             <arith op="+" calc="i+i">
              <fn name="count">
               <filter flags="b">
                <slash simple="1">
                 <dot type="element()"/>
                 <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </slash>
                <vc op="eq" comp="CCC">
                 <fn name="local-name">
                  <dot type="element()"/>
                 </fn>
                 <varRef name="vv:v1" slot="6"/>
                </vc>
               </filter>
              </fn>
              <int val="1"/>
             </arith>
            </let>
           </let>
           <str val="]"/>
          </fn>
         </valueOf>
        </choose>
       </sequence>
      </doc>
      <choose line="1939">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="updatedPath2" slot="2"/>
         </data>
        </cast>
        <varRef name="path" slot="0"/>
       </vc>
       <empty/>
       <true/>
       <copy line="1952" flags="cin">
        <applyT role="content" mode="Q{}delete-node" bSlot="0">
         <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         <withParam name="Q{}path" as="xs:string">
          <varRef line="1953" name="path" slot="0"/>
         </withParam>
         <withParam name="Q{}current-path" as="document-node()">
          <varRef line="1954" name="updatedPath2" slot="2"/>
         </withParam>
        </applyT>
       </copy>
      </choose>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="8" binds="">
  <mode name="Q{}get-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="0" flags="s" line="3110" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3113" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <dot type="*:textarea"/>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="3105" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3107" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <check card="?" diag="0|0||ixsl:get">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
          <dot type="element(Q{}option)"/>
          <str val="selected"/>
         </ifCall>
        </data>
        <true/>
       </gc>
      </filter>
     </check>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="0" flags="s" line="3091" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3095">
     <and op="and">
      <fn name="exists">
       <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
      </fn>
      <gc op="=" card="1:1" comp="CCC">
       <attVal name="Q{}type" chk="0"/>
       <str val="checkbox"/>
      </gc>
     </and>
     <ifCall line="3096" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="checked"/>
     </ifCall>
     <true/>
     <ifCall line="3099" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="value"/>
     </ifCall>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="32" binds="15 5 32 32 38 0 10 38 0 2 40 32 32 32 32 32 38 0 10 32 32 32 40 32 32 32 32 32 5 32 32 32">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="1047" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);"/>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1048" name="xformsjs-main" bSlot="0" flags="t">
     <withParam name="Q{}xforms-doc" flags="c" as="document-node()">
      <dot line="1049" type="document-node()"/>
     </withParam>
     <withParam name="Q{}xFormsId" flags="c" as="xs:string">
      <str val="xForm"/>
     </withParam>
    </callT>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="7" rank="1" minImp="0" slots="0" flags="s" line="1512" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}dispatch)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="12" rank="1" minImp="0" slots="1" flags="s" line="1686" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1689">
     <param name="Q{}selectedValue" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|selectedValue">
       <check card="1" diag="8|0|XTTE0590|selectedValue">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <message line="1691">
      <sequence role="select">
       <valueOf>
        <str val="[xforms:item] comparing value '"/>
       </valueOf>
       <valueOf>
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <mergeAdj>
            <slash>
             <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
             <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
            </slash>
           </mergeAdj>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
       <valueOf>
        <str val="' against selected value '"/>
       </valueOf>
       <valueOf>
        <varRef name="selectedValue" slot="0"/>
       </valueOf>
       <valueOf flags="S">
        <str val="'"/>
       </valueOf>
      </sequence>
      <str role="terminate" val="no"/>
      <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
     </message>
     <elem line="1693" name="option" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <att name="value" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </att>
       <choose line="1694">
        <gc op="=" card="1:1" comp="CCC">
         <varRef name="selectedValue" slot="0"/>
         <cast as="xs:string" emptiable="1">
          <atomSing card="?" diag="2|0||cast as">
           <slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </slash>
          </atomSing>
         </cast>
        </gc>
        <att line="1695" name="selected" flags="l">
         <varRef name="selectedValue" slot="0"/>
        </att>
       </choose>
       <valueOf line="1698" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}insert)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setindex)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="2.0" seq="6" rank="3" minImp="0" slots="6" flags="s" line="1422" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}textarea)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='textarea';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1425">
     <param name="Q{}nodeset" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <applyT line="1426" bSlot="2">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </applyT>
     <let line="1428" var="hints" as="text()*" slot="1" eval="3">
      <slash>
       <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
       <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
      </slash>
      <let line="1430" var="actions" as="map(*)*" slot="2" eval="3">
       <treat line="1431" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
        <applyT bSlot="3">
         <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
         <withParam name="Q{}nodeset" as="xs:string">
          <varRef line="1433" name="nodeset" slot="0"/>
         </withParam>
        </applyT>
       </treat>
       <let line="1440" var="bindingi" as="node()?" slot="3" eval="7">
        <treat line="1441" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
         <check card="?" diag="3|0|XTTE0570|bindingi">
          <callT name="getBinding" bSlot="4">
           <withParam name="Q{}this" flags="c" as="element()">
            <dot line="1442" type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <sequence line="1446">
         <message>
          <sequence role="select">
           <valueOf>
            <str val="[xforms:textarea] bindingi = "/>
           </valueOf>
           <valueOf>
            <fn name="serialize">
             <varRef name="bindingi" slot="3"/>
            </fn>
           </valueOf>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <let line="1449" var="refi" as="xs:string" slot="4" eval="7">
          <treat line="1450" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
           <check card="1" diag="3|0|XTTE0570|refi">
            <cvUntyped to="xs:string">
             <data>
              <callT name="getDataRef" bSlot="5">
               <withParam name="Q{}this" flags="c" as="element()">
                <dot line="1451" type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
               </withParam>
               <withParam name="Q{}bindingi" flags="c" as="node()?">
                <varRef line="1452" name="bindingi" slot="3"/>
               </withParam>
              </callT>
             </data>
            </cvUntyped>
           </check>
          </treat>
          <let line="1462" var="instanceField" as="node()?" slot="5" eval="7">
           <treat line="1463" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
            <check card="?" diag="3|0|XTTE0570|instanceField">
             <callT name="getReferencedInstanceField" bSlot="6">
              <withParam name="Q{}refi" flags="c" as="xs:string">
               <varRef line="1464" name="refi" slot="4"/>
              </withParam>
             </callT>
            </check>
           </treat>
           <sequence line="1469">
            <choose>
             <fn name="exists">
              <varRef name="actions" slot="2"/>
             </fn>
             <ifCall line="1484" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <choose line="1474">
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                </fn>
                <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                <true/>
                <fn name="generate-id">
                 <dot type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
                </fn>
               </choose>
               <varRef name="actions" slot="2"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <elem line="1491" name="textarea" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <copyOf flags="vc">
               <filter flags="b">
                <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                <vc op="ne" comp="CCC">
                 <fn name="local-name">
                  <dot type="attribute()"/>
                 </fn>
                 <str val="ref"/>
                </vc>
               </filter>
              </copyOf>
              <att line="1492" name="data-element" flags="l">
               <lastOf line="1488">
                <fn name="tokenize">
                 <varRef name="refi" slot="4"/>
                 <str val="/"/>
                 <str val=""/>
                </fn>
               </lastOf>
              </att>
              <att line="1498" name="data-ref" flags="l">
               <choose>
                <fn name="not">
                 <varRef name="nodeset" slot="0"/>
                </fn>
                <fn name="concat">
                 <varRef name="nodeset" slot="0"/>
                 <attVal name="Q{}ref" chk="0"/>
                </fn>
                <true/>
                <fn name="concat">
                 <varRef name="nodeset" slot="0"/>
                 <str val="/"/>
                 <attVal name="Q{}ref" chk="0"/>
                </fn>
               </choose>
              </att>
              <choose line="1500">
               <fn name="exists">
                <varRef name="instanceField" slot="5"/>
               </fn>
               <valueOf line="1501" flags="l">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="instanceField" slot="5"/>
                 </data>
                </convert>
               </valueOf>
               <true/>
               <sequence line="1503">
                <valueOf flags="Sl">
                 <str val=""/>
                </valueOf>
                <valueOf flags="l">
                 <str val="  "/>
                </valueOf>
               </sequence>
              </choose>
              <choose line="1506">
               <fn name="exists">
                <varRef name="hints" slot="1"/>
               </fn>
               <att line="1507" name="title" flags="l">
                <fn name="string-join">
                 <convert from="xs:untypedAtomic" to="xs:string">
                  <data>
                   <mergeAdj>
                    <varRef name="hints" slot="1"/>
                   </mergeAdj>
                  </data>
                 </convert>
                 <str val=" "/>
                </fn>
               </att>
              </choose>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="5" rank="1" minImp="0" slots="10" flags="s" line="1207" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='input';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1211">
     <param name="Q{}nodeset" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1212" name="Q{}position" slot="1">
      <str role="select" val=""/>
      <supplied role="conversion" slot="1"/>
     </param>
     <message line="1216">
      <sequence role="select">
       <valueOf>
        <str val="xforms:input = "/>
       </valueOf>
       <valueOf>
        <fn name="serialize">
         <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
        </fn>
       </valueOf>
       <valueOf>
        <str val=", &#xA;            nodeset = "/>
       </valueOf>
       <valueOf line="1217">
        <varRef name="nodeset" slot="0"/>
       </valueOf>
      </sequence>
      <str role="terminate" val="no"/>
      <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
     </message>
     <let line="1221" var="bindingi" as="node()?" slot="2" eval="7">
      <treat line="1222" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
       <check card="?" diag="3|0|XTTE0570|bindingi">
        <callT name="getBinding" bSlot="7">
         <withParam name="Q{}this" flags="c" as="element()">
          <dot line="1223" type="element(Q{http://www.w3.org/2002/xforms}input)"/>
         </withParam>
        </callT>
       </check>
      </treat>
      <sequence line="1227">
       <message>
        <sequence role="select">
         <valueOf>
          <str val="Input bound to: "/>
         </valueOf>
         <valueOf>
          <fn name="serialize">
           <varRef name="bindingi" slot="2"/>
          </fn>
         </valueOf>
        </sequence>
        <str role="terminate" val="no"/>
        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
       </message>
       <let line="1231" var="refi" as="xs:string" slot="3" eval="7">
        <treat line="1232" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
         <check card="1" diag="3|0|XTTE0570|refi">
          <cvUntyped to="xs:string">
           <data>
            <callT name="getDataRef" bSlot="8">
             <withParam name="Q{}this" flags="c" as="element()">
              <dot line="1233" type="element(Q{http://www.w3.org/2002/xforms}input)"/>
             </withParam>
             <withParam name="Q{}bindingi" flags="c" as="node()?">
              <varRef line="1234" name="bindingi" slot="2"/>
             </withParam>
            </callT>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <let line="1245" var="instanceForBinding" as="node()?" slot="4" eval="7">
         <treat line="1246" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceForBinding">
          <check card="?" diag="3|0|XTTE0570|instanceForBinding">
           <callT name="getItemForBinding" bSlot="9">
            <withParam name="Q{}bindingi" flags="c" as="node()?">
             <varRef line="1247" name="bindingi" slot="2"/>
            </withParam>
           </callT>
          </check>
         </treat>
         <let line="1260" var="relevantVar" as="xs:boolean" slot="5" eval="7">
          <choose line="1262">
           <and op="and">
            <and op="and">
             <fn name="exists">
              <varRef name="bindingi" slot="2"/>
             </fn>
             <fn name="exists">
              <slash simple="1">
               <varRef name="bindingi" slot="2"/>
               <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
              </slash>
             </fn>
            </and>
            <fn name="exists">
             <varRef name="instanceForBinding" slot="4"/>
            </fn>
           </and>
           <treat line="1264" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantVar">
            <check card="1" diag="3|0|XTTE0570|relevantVar">
             <cvUntyped to="xs:boolean">
              <data>
               <evaluate dxns="">
                <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="10" eval="4">
                 <check card="1" diag="0|0||xforms:impose">
                  <cvUntyped to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="bindingi" slot="2"/>
                     <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                    </slash>
                   </data>
                  </cvUntyped>
                 </check>
                </ufCall>
                <varRef role="cxt" name="instanceForBinding" slot="4"/>
                <str role="sa" val="no"/>
                <map role="wp" size="0"/>
               </evaluate>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <true/>
           <true/>
          </choose>
          <let line="1272" var="actions" as="map(*)*" slot="6" eval="3">
           <treat line="1273" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
            <applyT bSlot="11">
             <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
             <withParam name="Q{}nodeset" as="xs:string">
              <varRef line="1275" name="refi" slot="3"/>
             </withParam>
             <withParam name="Q{}position">
              <varRef line="1277" name="position" slot="1"/>
             </withParam>
            </applyT>
           </treat>
           <let line="1285" var="myid" as="item()?" slot="7" eval="7">
            <choose>
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             </fn>
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             <true/>
             <fn name="concat">
              <fn name="generate-id">
               <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
              </fn>
              <atomSing card="?" diag="0|1||fn:concat">
               <varRef name="position" slot="1"/>
              </atomSing>
             </fn>
            </choose>
            <sequence line="1287">
             <choose>
              <fn name="exists">
               <varRef name="actions" slot="6"/>
              </fn>
              <ifCall line="1288" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="addAction"/>
               <arrayBlock>
                <varRef name="myid" slot="7"/>
                <varRef name="actions" slot="6"/>
               </arrayBlock>
              </ifCall>
             </choose>
             <message line="1291">
              <sequence role="select">
               <valueOf>
                <str val=" &#xA;            binding relevant = "/>
               </valueOf>
               <valueOf line="1292">
                <convert from="xs:untypedAtomic" to="xs:string">
                 <data>
                  <slash simple="1">
                   <varRef name="bindingi" slot="2"/>
                   <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                  </slash>
                 </data>
                </convert>
               </valueOf>
               <valueOf>
                <str val=", &#xA;            isRelevantVar = "/>
               </valueOf>
               <valueOf line="1293">
                <fn name="serialize">
                 <varRef name="relevantVar" slot="5"/>
                </fn>
               </valueOf>
               <valueOf>
                <str val=", &#xA;            refi = "/>
               </valueOf>
               <valueOf line="1294">
                <varRef name="refi" slot="3"/>
               </valueOf>
              </sequence>
              <str role="terminate" val="no"/>
              <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
             </message>
             <elem line="1298" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
              <sequence>
               <att name="style" flags="l">
                <choose>
                 <varRef name="relevantVar" slot="5"/>
                 <str val="display:inline"/>
                 <true/>
                 <str val="display:none"/>
                </choose>
               </att>
               <applyT line="1301" bSlot="12">
                <axis role="select" name="child" nodeTest="(element(Q{http://www.w3.org/2002/xforms}label) | element(Q{http://www.w3.org/2002/xforms}hint))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';};return a()||b();"/>
                <withParam name="Q{}nodeset" as="xs:string">
                 <varRef line="1303" name="refi" slot="3"/>
                </withParam>
                <withParam name="Q{}position">
                 <varRef line="1305" name="position" slot="1"/>
                </withParam>
               </applyT>
               <let line="1311" var="hints" as="text()*" slot="8" eval="3">
                <slash>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
                 <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
                </slash>
                <elem line="1316" name="input" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                 <sequence>
                  <att name="data-element" flags="l">
                   <lastOf line="1313">
                    <fn name="tokenize">
                     <varRef name="refi" slot="3"/>
                     <str val="/"/>
                     <str val=""/>
                    </fn>
                   </lastOf>
                  </att>
                  <choose line="1317">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="2"/>
                      <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1318" name="data-required" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="2"/>
                       <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1320">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="2"/>
                      <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1321" name="data-constraint" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="2"/>
                       <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1323">
                   <fn name="exists">
                    <varRef name="actions" slot="6"/>
                   </fn>
                   <att line="1324" name="data-action" flags="l">
                    <fn name="string-join">
                     <convert from="xs:anyAtomicType" to="xs:string">
                      <data>
                       <varRef name="myid" slot="7"/>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <choose line="1327">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="2"/>
                      <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1328" name="data-relevant" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="2"/>
                       <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1330">
                   <fn name="exists">
                    <varRef name="bindingi" slot="2"/>
                   </fn>
                   <message line="1331">
                    <sequence role="select">
                     <valueOf>
                      <str val="&#xA;                    binding found! : "/>
                     </valueOf>
                     <valueOf line="1332">
                      <fn name="serialize">
                       <varRef name="bindingi" slot="2"/>
                      </fn>
                     </valueOf>
                     <valueOf>
                      <str val=", &#xA;                    refi = "/>
                     </valueOf>
                     <valueOf line="1333">
                      <varRef name="refi" slot="3"/>
                     </valueOf>
                    </sequence>
                    <str role="terminate" val="no"/>
                    <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                   </message>
                  </choose>
                  <choose line="1343">
                   <choose>
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="2"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="date"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1344">
                    <att name="data-type" flags="l">
                     <str val="date"/>
                    </att>
                    <att line="1346" name="type" flags="l">
                     <str val="date"/>
                    </att>
                    <att line="1349" name="value" flags="l">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <choose>
                       <fn name="exists">
                        <varRef name="instanceForBinding" slot="4"/>
                       </fn>
                       <cast line="1350" as="xs:untypedAtomic" emptiable="0">
                        <fn name="string">
                         <convert from="xs:anyAtomicType" to="xs:string">
                          <data>
                           <varRef name="instanceForBinding" slot="4"/>
                          </data>
                         </convert>
                        </fn>
                       </cast>
                      </choose>
                     </convert>
                    </att>
                   </sequence>
                   <choose line="1359">
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="2"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="time"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1360">
                    <att name="data-type" flags="l">
                     <str val="time"/>
                    </att>
                    <att line="1362" name="type" flags="l">
                     <str val="time"/>
                    </att>
                    <att line="1366" name="value" flags="l">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <choose>
                       <fn name="exists">
                        <varRef name="instanceForBinding" slot="4"/>
                       </fn>
                       <cast line="1367" as="xs:untypedAtomic" emptiable="0">
                        <fn name="string">
                         <convert from="xs:anyAtomicType" to="xs:string">
                          <data>
                           <varRef name="instanceForBinding" slot="4"/>
                          </data>
                         </convert>
                        </fn>
                       </cast>
                      </choose>
                     </convert>
                    </att>
                   </sequence>
                   <choose line="1376">
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="2"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="boolean"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1377">
                    <att name="data-type" flags="l">
                     <str val="checkbox"/>
                    </att>
                    <att line="1379" name="type" flags="l">
                     <str val="checkbox"/>
                    </att>
                    <choose line="1384">
                     <fn name="exists">
                      <varRef name="instanceForBinding" slot="4"/>
                     </fn>
                     <let line="1385" var="checkedi" as="document-node()" slot="9" eval="7">
                      <doc line="1386" flags="t" validation="preserve">
                       <valueOf flags="l">
                        <convert from="xs:anyAtomicType" to="xs:string">
                         <data>
                          <varRef name="instanceForBinding" slot="4"/>
                         </data>
                        </convert>
                       </valueOf>
                      </doc>
                      <sequence line="1388">
                       <message>
                        <sequence role="select">
                         <valueOf>
                          <convert from="xs:untypedAtomic" to="xs:string">
                           <data>
                            <slash simple="1">
                             <varRef name="bindingi" slot="2"/>
                             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                            </slash>
                           </data>
                          </convert>
                         </valueOf>
                         <valueOf>
                          <str val=", $checkedi "/>
                         </valueOf>
                         <valueOf>
                          <fn name="serialize">
                           <varRef name="checkedi" slot="9"/>
                          </fn>
                         </valueOf>
                        </sequence>
                        <str role="terminate" val="no"/>
                        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
                       </message>
                       <choose line="1389">
                        <and op="and">
                         <and op="and">
                          <fn name="exists">
                           <varRef name="checkedi" slot="9"/>
                          </fn>
                          <cvUntyped to="xs:string">
                           <data>
                            <varRef name="checkedi" slot="9"/>
                           </data>
                          </cvUntyped>
                         </and>
                         <cast as="xs:boolean" emptiable="0">
                          <data>
                           <varRef name="checkedi" slot="9"/>
                          </data>
                         </cast>
                        </and>
                        <att line="1390" name="checked" flags="l">
                         <convert from="xs:untypedAtomic" to="xs:string">
                          <data>
                           <varRef name="checkedi" slot="9"/>
                          </data>
                         </convert>
                        </att>
                       </choose>
                      </sequence>
                     </let>
                    </choose>
                   </sequence>
                   <true/>
                   <sequence line="1397">
                    <choose>
                     <varRef name="relevantVar" slot="5"/>
                     <att line="1398" name="type" flags="l">
                      <str val="text"/>
                     </att>
                    </choose>
                    <att line="1401" name="value" flags="l">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <choose>
                       <fn name="exists">
                        <varRef name="instanceForBinding" slot="4"/>
                       </fn>
                       <cast line="1402" as="xs:untypedAtomic" emptiable="0">
                        <fn name="string">
                         <convert from="xs:anyAtomicType" to="xs:string">
                          <data>
                           <varRef name="instanceForBinding" slot="4"/>
                          </data>
                         </convert>
                        </fn>
                       </cast>
                      </choose>
                     </convert>
                    </att>
                   </sequence>
                  </choose>
                  <choose line="1409">
                   <fn name="exists">
                    <varRef name="hints" slot="8"/>
                   </fn>
                   <att line="1410" name="title" flags="l">
                    <fn name="string-join">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <mergeAdj>
                        <varRef name="hints" slot="8"/>
                       </mergeAdj>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <choose line="1412">
                   <fn name="exists">
                    <axis name="attribute" nodeTest="attribute(Q{}size)" jsTest="return item.name==='size'"/>
                   </fn>
                   <att line="1413" name="size" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <attVal name="Q{}size" chk="0"/>
                    </convert>
                   </att>
                  </choose>
                  <att line="1415" name="data-ref" flags="l">
                   <varRef name="refi" slot="3"/>
                  </att>
                 </sequence>
                </elem>
               </let>
              </sequence>
             </elem>
            </sequence>
           </let>
          </let>
         </let>
        </let>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}reset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="13" rank="1" minImp="0" slots="5" flags="s" line="1703" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}group)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='group';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1704">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1705" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1706" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="1709" var="context" as="element(Q{http://www.w3.org/2002/xforms}group)" slot="3" eval="7">
      <dot type="element(Q{http://www.w3.org/2002/xforms}group)"/>
      <let line="1710" var="refi" as="xs:string?" slot="4" eval="7">
       <choose line="1712">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <cvUntyped to="xs:string">
         <data>
          <slash simple="1">
           <varRef name="context" slot="3"/>
           <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
          </slash>
         </data>
        </cvUntyped>
        <fn line="1713" name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <cvUntyped line="1713" to="xs:string">
         <data>
          <slash simple="1">
           <varRef name="context" slot="3"/>
           <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
          </slash>
         </data>
        </cvUntyped>
       </choose>
       <elem line="1719" name="div" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="refi" slot="4"/>
          </fn>
          <att line="1720" name="data-group-ref" flags="l">
           <varRef name="refi" slot="4"/>
          </att>
         </choose>
         <choose line="1722">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
          </fn>
          <att line="1723" name="id" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </att>
         </choose>
         <applyT line="1726" bSlot="13">
          <slash role="select" simple="1">
           <varRef name="context" slot="3"/>
           <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          </slash>
          <withParam name="Q{}instance1" as="node()?">
           <varRef line="1727" name="instance1" slot="0"/>
          </withParam>
          <withParam name="Q{}position" as="xs:integer">
           <fn line="1728" name="position"/>
          </withParam>
          <withParam name="Q{}nodeset" as="xs:string?">
           <choose line="1729">
            <fn name="exists">
             <varRef name="refi" slot="4"/>
            </fn>
            <varRef name="refi" slot="4"/>
            <true/>
            <str val=""/>
           </choose>
          </withParam>
          <withParam name="Q{}bindings" as="map(xs:string, node())">
           <varRef line="1730" name="bindings" slot="1"/>
          </withParam>
          <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
           <varRef line="1731" name="submissions" slot="2"/>
          </withParam>
         </applyT>
        </sequence>
       </elem>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="0" rank="1" minImp="0" slots="0" flags="s" line="1045" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}toggle)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="11" rank="1" minImp="0" slots="1" flags="s" line="1674" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1675">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <elem line="1678" name="label" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <choose>
       <fn name="exists">
        <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </fn>
       <applyT line="1679" bSlot="14">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </applyT>
       <true/>
       <sequence line="1681">
        <valueOf flags="l">
         <str val=" "/>
        </valueOf>
        <valueOf flags="Sl">
         <str val=""/>
        </valueOf>
       </sequence>
      </choose>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}message)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="1073" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/1999/xhtml}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1075" name="html" nsuri="" namespaces="rdf xhtml js in fn map array ev">
     <sequence>
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="1077" name="head" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <copyOf flags="vc">
         <union op="|">
          <slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash>
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="1078" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="1080">
         <union op="|">
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="1082" name="meta" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
          <copyOf flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="1087" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="1090" name="body" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <applyT bSlot="15">
        <slash role="select">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="8" rank="1" minImp="0" slots="8" flags="s" line="1514" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1518">
     <param name="Q{}nodeset" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1519" name="Q{}position" slot="1">
      <str role="select" val=""/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1527" var="bindingi" as="node()?" slot="2" eval="7">
      <treat line="1528" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
       <check card="?" diag="3|0|XTTE0570|bindingi">
        <callT name="getBinding" bSlot="16">
         <withParam name="Q{}this" flags="c" as="element()">
          <dot line="1529" type="element()"/>
         </withParam>
        </callT>
       </check>
      </treat>
      <let line="1534" var="refi" as="xs:string" slot="3" eval="7">
       <treat line="1535" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
        <check card="1" diag="3|0|XTTE0570|refi">
         <cvUntyped to="xs:string">
          <data>
           <callT name="getDataRef" bSlot="17">
            <withParam name="Q{}this" flags="c" as="element()">
             <dot line="1536" type="element()"/>
            </withParam>
            <withParam name="Q{}bindingi" flags="c" as="node()?">
             <varRef line="1537" name="bindingi" slot="2"/>
            </withParam>
           </callT>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <let line="1547" var="instanceField" as="node()?" slot="4" eval="7">
        <treat line="1548" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
         <check card="?" diag="3|0|XTTE0570|instanceField">
          <callT name="getReferencedInstanceField" bSlot="18">
           <withParam name="Q{}refi" flags="c" as="xs:string">
            <varRef line="1549" name="refi" slot="3"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <sequence line="1553">
         <message>
          <sequence role="select">
           <valueOf>
            <str val="[xforms:select] instance field = "/>
           </valueOf>
           <valueOf>
            <fn name="serialize">
             <varRef name="instanceField" slot="4"/>
            </fn>
           </valueOf>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <let line="1555" var="selectedValue" as="xs:string" slot="5" eval="7">
          <choose line="1557">
           <fn name="exists">
            <varRef name="instanceField" slot="4"/>
           </fn>
           <cvUntyped line="1558" to="xs:string">
            <cast as="xs:untypedAtomic" emptiable="0">
             <fn name="string">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <varRef name="instanceField" slot="4"/>
               </data>
              </convert>
             </fn>
            </cast>
           </cvUntyped>
           <true/>
           <str val=""/>
          </choose>
          <sequence line="1566">
           <message>
            <sequence role="select">
             <valueOf>
              <str val="[xforms:select] selected value = "/>
             </valueOf>
             <valueOf>
              <varRef name="selectedValue" slot="5"/>
             </valueOf>
            </sequence>
            <str role="terminate" val="no"/>
            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
           </message>
           <applyT line="1569" bSlot="19">
            <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
           </applyT>
           <let line="1571" var="actions" as="map(*)*" slot="6" eval="3">
            <treat line="1572" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
             <applyT bSlot="20">
              <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
              <withParam name="Q{}nodeset" as="xs:string">
               <varRef line="1574" name="refi" slot="3"/>
              </withParam>
             </applyT>
            </treat>
            <let line="1585" var="myid" as="item()?" slot="7" eval="7">
             <choose>
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              </fn>
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              <true/>
              <fn name="concat">
               <fn name="generate-id">
                <dot type="element()"/>
               </fn>
               <atomSing card="?" diag="0|1||fn:concat">
                <varRef name="position" slot="1"/>
               </atomSing>
              </fn>
             </choose>
             <sequence line="1588">
              <choose>
               <fn name="exists">
                <varRef name="actions" slot="6"/>
               </fn>
               <ifCall line="1597" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                <check card="1" diag="0|0||ixsl:call">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                </check>
                <str val="addAction"/>
                <arrayBlock>
                 <varRef name="myid" slot="7"/>
                 <varRef name="actions" slot="6"/>
                </arrayBlock>
               </ifCall>
              </choose>
              <elem line="1603" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
               <sequence>
                <att name="style" flags="l">
                 <str val="display:inline"/>
                </att>
                <elem line="1605" name="select" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                 <sequence>
                  <copyOf flags="vc">
                   <filter flags="b">
                    <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                    <vc op="ne" comp="CCC">
                     <fn name="local-name">
                      <dot type="attribute()"/>
                     </fn>
                     <str val="ref"/>
                    </vc>
                   </filter>
                  </copyOf>
                  <choose line="1606">
                   <fn name="exists">
                    <varRef name="refi" slot="3"/>
                   </fn>
                   <att line="1607" name="data-ref" flags="l">
                    <varRef name="refi" slot="3"/>
                   </att>
                  </choose>
                  <att line="1618" name="data-element" flags="l">
                   <lastOf line="1601">
                    <fn name="tokenize">
                     <varRef name="refi" slot="3"/>
                     <str val="/"/>
                     <str val=""/>
                    </fn>
                   </lastOf>
                  </att>
                  <choose line="1619">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="2"/>
                      <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1620" name="data-constraint" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="2"/>
                       <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1622">
                   <vc op="eq" onEmpty="0" comp="CCC">
                    <fn name="local-name">
                     <dot type="element()"/>
                    </fn>
                    <str val="select"/>
                   </vc>
                   <sequence line="1625">
                    <att name="multiple" flags="l">
                     <str val="true"/>
                    </att>
                    <att name="size" flags="l">
                     <convert from="xs:integer" to="xs:string">
                      <fn name="count">
                       <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                      </fn>
                     </convert>
                    </att>
                   </sequence>
                  </choose>
                  <choose line="1628">
                   <fn name="exists">
                    <varRef name="actions" slot="6"/>
                   </fn>
                   <att line="1629" name="data-action" flags="l">
                    <fn name="string-join">
                     <convert from="xs:anyAtomicType" to="xs:string">
                      <data>
                       <varRef name="myid" slot="7"/>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <applyT line="1634" bSlot="21">
                   <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                   <withParam name="Q{}selectedValue" as="xs:string">
                    <varRef line="1639" name="selectedValue" slot="5"/>
                   </withParam>
                  </applyT>
                 </sequence>
                </elem>
               </sequence>
              </elem>
             </sequence>
            </let>
           </let>
          </sequence>
         </let>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setvalue)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hide)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="4" rank="1" minImp="0" slots="10" flags="s" line="1097" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}output)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='output';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1098">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1099" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1101" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1102" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <message line="1104">
      <sequence role="select">
       <valueOf flags="S">
        <str val="xforms:output="/>
       </valueOf>
       <valueOf>
        <fn name="serialize">
         <varRef name="instance1" slot="0"/>
        </fn>
       </valueOf>
       <valueOf>
        <str val=" ref= "/>
       </valueOf>
       <valueOf line="1105">
        <convert from="xs:untypedAtomic" to="xs:string">
         <attVal name="Q{}ref" chk="0"/>
        </convert>
       </valueOf>
       <valueOf>
        <str val=", "/>
       </valueOf>
       <valueOf line="1105">
        <fn name="serialize">
         <dot type="element(Q{http://www.w3.org/2002/xforms}output)"/>
        </fn>
       </valueOf>
       <valueOf>
        <str val=" nodeset = "/>
       </valueOf>
       <valueOf line="1106">
        <varRef name="nodeset" slot="2"/>
       </valueOf>
      </sequence>
      <str role="terminate" val="no"/>
      <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
     </message>
     <let line="1109" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="1111">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="1112" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="1114" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="1115" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="1130" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="1131" var="refi" as="xs:string" slot="6" eval="7">
        <choose line="1133">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </fn>
         <cvUntyped line="1140" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <choose>
            <fn name="not">
             <varRef name="nodeset" slot="2"/>
            </fn>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
            <true/>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <str val="/"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
           </choose>
          </cast>
         </cvUntyped>
         <fn line="1142" name="exists">
          <varRef name="bindingi" slot="5"/>
         </fn>
         <cvUntyped line="1149" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <choose>
              <fn name="exists">
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </fn>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
              <true/>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </choose>
            </convert>
            <str val=" "/>
           </fn>
          </cast>
         </cvUntyped>
         <true/>
         <str val=""/>
        </choose>
        <let line="1158" var="instanceForBinding" as="node()?" slot="7" eval="7">
         <choose line="1160">
          <and op="and">
           <fn name="exists">
            <varRef name="bindingi" slot="5"/>
           </fn>
           <fn name="exists">
            <slash simple="1">
             <varRef name="bindingi" slot="5"/>
             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
            </slash>
           </fn>
          </and>
          <check line="1161" card="?" diag="3|0|XTTE0570|instanceForBinding">
           <sequence>
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceForBinding">
             <message>
              <sequence role="select">
               <valueOf>
                <str val="&#xA;                        Instance= "/>
               </valueOf>
               <valueOf line="1162">
                <fn name="serialize">
                 <varRef name="instance1" slot="0"/>
                </fn>
               </valueOf>
               <valueOf>
                <str val="&#xA;                        instanceForBinding found binding/@nodeset "/>
               </valueOf>
               <valueOf line="1163">
                <convert from="xs:untypedAtomic" to="xs:string">
                 <data>
                  <slash simple="1">
                   <varRef name="bindingi" slot="5"/>
                   <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                  </slash>
                 </data>
                </convert>
               </valueOf>
              </sequence>
              <str role="terminate" val="no"/>
              <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
             </message>
            </treat>
            <treat line="1164" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceForBinding">
             <evaluate dxns="">
              <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
               <cvUntyped to="xs:string">
                <data>
                 <slash simple="1">
                  <varRef name="bindingi" slot="5"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cvUntyped>
              </check>
              <varRef role="cxt" name="instance1" slot="0"/>
              <str role="sa" val="no"/>
              <map role="wp" size="0"/>
             </evaluate>
            </treat>
           </sequence>
          </check>
          <true/>
          <varRef line="1167" name="instance1" slot="0"/>
         </choose>
         <let line="1172" var="valueExecuted" as="xs:string" slot="8" eval="8">
          <evaluate line="1173" as="xs:string" dxns="">
           <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
            <cvUntyped to="xs:string">
             <attVal name="Q{}value" chk="0"/>
            </cvUntyped>
           </check>
           <varRef role="cxt" name="instance1" slot="0"/>
           <str role="sa" val="no"/>
           <map role="wp" size="0"/>
          </evaluate>
          <let line="1176" var="relevantVar" as="xs:boolean" slot="9" eval="7">
           <choose line="1178">
            <and op="and">
             <and op="and">
              <fn name="exists">
               <varRef name="bindingi" slot="5"/>
              </fn>
              <fn name="exists">
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
               </slash>
              </fn>
             </and>
             <fn name="exists">
              <varRef name="instanceForBinding" slot="7"/>
             </fn>
            </and>
            <treat line="1179" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantVar">
             <check card="1" diag="3|0|XTTE0570|relevantVar">
              <cvUntyped to="xs:boolean">
               <data>
                <evaluate dxns="">
                 <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="22" eval="4">
                  <check card="1" diag="0|0||xforms:impose">
                   <cvUntyped to="xs:string">
                    <data>
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                     </slash>
                    </data>
                   </cvUntyped>
                  </check>
                 </ufCall>
                 <varRef role="cxt" name="instanceForBinding" slot="7"/>
                 <str role="sa" val="no"/>
                 <map role="wp" size="0"/>
                </evaluate>
               </data>
              </cvUntyped>
             </check>
            </treat>
            <true/>
            <true/>
           </choose>
           <sequence line="1187">
            <applyT bSlot="23">
             <axis role="select" name="child" nodeTest="(element(Q{http://www.w3.org/2002/xforms}label) | element(Q{http://www.w3.org/2002/xforms}hint))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';};return a()||b();"/>
             <withParam name="Q{}instance1" as="node()?">
              <varRef line="1188" name="instance1" slot="0"/>
             </withParam>
             <withParam name="Q{}nodeset" as="xs:string">
              <varRef line="1189" name="refi" slot="6"/>
             </withParam>
             <withParam name="Q{}bindings" as="map(xs:string, node())">
              <varRef line="1190" name="bindings" slot="1"/>
             </withParam>
             <withParam name="Q{}position">
              <varRef line="1191" name="position" slot="3"/>
             </withParam>
            </applyT>
            <elem line="1194" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="style" flags="l">
               <choose>
                <varRef name="relevantVar" slot="9"/>
                <str val="display:inline"/>
                <true/>
                <str val="display:none"/>
               </choose>
              </att>
              <att line="1195" name="data-ref" flags="l">
               <varRef name="refi" slot="6"/>
              </att>
              <choose line="1197">
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
               </fn>
               <att line="1198" name="class" flags="l">
                <convert from="xs:untypedAtomic" to="xs:string">
                 <attVal name="Q{}class" chk="0"/>
                </convert>
               </att>
              </choose>
              <varRef line="1202" name="valueExecuted" slot="8"/>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setfocus)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2235" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}trigger)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='trigger';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2236">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2237" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2238" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2239" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2240" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <let line="2249" var="innerbody" as="document-node()" slot="5" eval="7">
      <doc line="2251" validation="preserve">
       <choose>
        <fn name="exists">
         <filter flags="b">
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          <vc op="eq" comp="CCC">
           <fn name="local-name">
            <dot type="element()"/>
           </fn>
           <str val="label"/>
          </vc>
         </filter>
        </fn>
        <applyT line="2253" bSlot="24">
         <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="2254" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="2255" name="bindings" slot="1"/>
         </withParam>
        </applyT>
        <true/>
        <valueOf line="2259" flags="l">
         <str val=" "/>
        </valueOf>
       </choose>
      </doc>
      <let line="2267" var="myid" as="item()?" slot="6" eval="7">
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        </fn>
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        <true/>
        <fn name="concat">
         <fn name="generate-id">
          <dot type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
         </fn>
         <atomSing card="?" diag="0|1||fn:concat">
          <varRef name="position" slot="3"/>
         </atomSing>
        </fn>
       </choose>
       <let line="2277" var="actions" as="map(*)*" slot="7" eval="3">
        <treat line="2278" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
         <applyT bSlot="25">
          <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
          <withParam name="Q{}instance1" as="node()?">
           <varRef line="2279" name="instance1" slot="0"/>
          </withParam>
          <withParam name="Q{}nodeset">
           <varRef line="2280" name="nodeset" slot="4"/>
          </withParam>
          <withParam name="Q{}bindings" as="map(xs:string, node())">
           <varRef line="2281" name="bindings" slot="1"/>
          </withParam>
          <withParam name="Q{}position">
           <varRef line="2282" name="position" slot="3"/>
          </withParam>
          <withParam name="Q{}myid" flags="t" as="item()?">
           <varRef line="2283" name="myid" slot="6"/>
          </withParam>
         </applyT>
        </treat>
        <sequence line="2288">
         <choose>
          <fn name="exists">
           <varRef name="actions" slot="7"/>
          </fn>
          <ifCall line="2299" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="addAction"/>
           <arrayBlock>
            <varRef name="myid" slot="6"/>
            <varRef name="actions" slot="7"/>
           </arrayBlock>
          </ifCall>
         </choose>
         <elem line="2303" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
          <sequence>
           <att name="style" flags="l">
            <str val="display:'inline'"/>
           </att>
           <choose line="2305">
            <gc op="=" card="1:1" comp="CCC">
             <attVal name="Q{}appearance" chk="0"/>
             <str val="minimal"/>
            </gc>
            <elem line="2307" name="a" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="data-action" flags="l">
               <fn name="string-join">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="myid" slot="6"/>
                 </data>
                </convert>
                <str val=" "/>
               </fn>
              </att>
              <copyOf line="2308" flags="vc">
               <varRef name="innerbody" slot="5"/>
              </copyOf>
             </sequence>
            </elem>
            <true/>
            <elem line="2312" name="button" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="type" flags="l">
               <str val="button"/>
              </att>
              <att line="2315" name="data-action" flags="l">
               <fn name="string-join">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="myid" slot="6"/>
                 </data>
                </convert>
                <str val=" "/>
               </fn>
              </att>
              <copyOf line="2320" flags="vc">
               <varRef name="innerbody" slot="5"/>
              </copyOf>
             </sequence>
            </elem>
           </choose>
          </sequence>
         </elem>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}rebuild)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="1" minImp="0" slots="0" flags="s" line="1061" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
    <applyT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1066" flags="t" bSlot="26">
     <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
    </applyT>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}delete)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}unload)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="15" rank="1" minImp="0" slots="4" flags="s" line="1835" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}submit)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submit';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1836">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1837" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1838" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="1839" var="innerbody" as="document-node()" slot="3" eval="7">
      <doc line="1841" validation="preserve">
       <choose>
        <fn name="exists">
         <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
        </fn>
        <applyT line="1842" bSlot="27">
         <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="1843" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="1844" name="bindings" slot="1"/>
         </withParam>
        </applyT>
        <true/>
        <valueOf line="1848" flags="l">
         <str val=" "/>
        </valueOf>
       </choose>
      </doc>
      <choose line="1854">
       <gc op="=" card="1:1" comp="CCC">
        <attVal name="Q{}appearance" chk="0"/>
        <str val="minimal"/>
       </gc>
       <elem line="1856" name="a" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <copyOf flags="vc">
         <varRef name="innerbody" slot="3"/>
        </copyOf>
       </elem>
       <true/>
       <elem line="1860" name="button" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <sequence>
         <att name="type" flags="l">
          <str val="button"/>
         </att>
         <copyOf line="1861" flags="vc">
          <filter flags="b">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
           <vc op="ne" comp="CCC">
            <fn name="local-name">
             <dot type="attribute()"/>
            </fn>
            <str val="ref"/>
           </vc>
          </filter>
         </copyOf>
         <choose line="1862">
          <and op="and">
           <fn name="exists">
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
           </fn>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <varRef name="submissions" slot="2"/>
            <atomSing diag="0|1||map:contains">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </atomSing>
           </ifCall>
          </and>
          <att line="1863" name="data-submit" flags="l">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="submissions" slot="2"/>
            <atomSing diag="0|1||map:get">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </atomSing>
           </ifCall>
          </att>
         </choose>
         <copyOf line="1865" flags="vc">
          <varRef name="innerbody" slot="3"/>
         </copyOf>
        </sequence>
       </elem>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}load)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="8" rank="1" minImp="0" slots="8" flags="s" line="1514" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select1)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select1';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1518">
     <param name="Q{}nodeset" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1519" name="Q{}position" slot="1">
      <str role="select" val=""/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1527" var="bindingi" as="node()?" slot="2" eval="7">
      <treat line="1528" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|bindingi">
       <check card="?" diag="3|0|XTTE0570|bindingi">
        <callT name="getBinding" bSlot="16">
         <withParam name="Q{}this" flags="c" as="element()">
          <dot line="1529" type="element()"/>
         </withParam>
        </callT>
       </check>
      </treat>
      <let line="1534" var="refi" as="xs:string" slot="3" eval="7">
       <treat line="1535" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|refi">
        <check card="1" diag="3|0|XTTE0570|refi">
         <cvUntyped to="xs:string">
          <data>
           <callT name="getDataRef" bSlot="17">
            <withParam name="Q{}this" flags="c" as="element()">
             <dot line="1536" type="element()"/>
            </withParam>
            <withParam name="Q{}bindingi" flags="c" as="node()?">
             <varRef line="1537" name="bindingi" slot="2"/>
            </withParam>
           </callT>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <let line="1547" var="instanceField" as="node()?" slot="4" eval="7">
        <treat line="1548" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceField">
         <check card="?" diag="3|0|XTTE0570|instanceField">
          <callT name="getReferencedInstanceField" bSlot="18">
           <withParam name="Q{}refi" flags="c" as="xs:string">
            <varRef line="1549" name="refi" slot="3"/>
           </withParam>
          </callT>
         </check>
        </treat>
        <sequence line="1553">
         <message>
          <sequence role="select">
           <valueOf>
            <str val="[xforms:select] instance field = "/>
           </valueOf>
           <valueOf>
            <fn name="serialize">
             <varRef name="instanceField" slot="4"/>
            </fn>
           </valueOf>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <let line="1555" var="selectedValue" as="xs:string" slot="5" eval="7">
          <choose line="1557">
           <fn name="exists">
            <varRef name="instanceField" slot="4"/>
           </fn>
           <cvUntyped line="1558" to="xs:string">
            <cast as="xs:untypedAtomic" emptiable="0">
             <fn name="string">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <varRef name="instanceField" slot="4"/>
               </data>
              </convert>
             </fn>
            </cast>
           </cvUntyped>
           <true/>
           <str val=""/>
          </choose>
          <sequence line="1566">
           <message>
            <sequence role="select">
             <valueOf>
              <str val="[xforms:select] selected value = "/>
             </valueOf>
             <valueOf>
              <varRef name="selectedValue" slot="5"/>
             </valueOf>
            </sequence>
            <str role="terminate" val="no"/>
            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
           </message>
           <applyT line="1569" bSlot="19">
            <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
           </applyT>
           <let line="1571" var="actions" as="map(*)*" slot="6" eval="3">
            <treat line="1572" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
             <applyT bSlot="20">
              <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
              <withParam name="Q{}nodeset" as="xs:string">
               <varRef line="1574" name="refi" slot="3"/>
              </withParam>
             </applyT>
            </treat>
            <let line="1585" var="myid" as="item()?" slot="7" eval="7">
             <choose>
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              </fn>
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              <true/>
              <fn name="concat">
               <fn name="generate-id">
                <dot type="element()"/>
               </fn>
               <atomSing card="?" diag="0|1||fn:concat">
                <varRef name="position" slot="1"/>
               </atomSing>
              </fn>
             </choose>
             <sequence line="1588">
              <choose>
               <fn name="exists">
                <varRef name="actions" slot="6"/>
               </fn>
               <ifCall line="1597" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                <check card="1" diag="0|0||ixsl:call">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                </check>
                <str val="addAction"/>
                <arrayBlock>
                 <varRef name="myid" slot="7"/>
                 <varRef name="actions" slot="6"/>
                </arrayBlock>
               </ifCall>
              </choose>
              <elem line="1603" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
               <sequence>
                <att name="style" flags="l">
                 <str val="display:inline"/>
                </att>
                <elem line="1605" name="select" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                 <sequence>
                  <copyOf flags="vc">
                   <filter flags="b">
                    <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                    <vc op="ne" comp="CCC">
                     <fn name="local-name">
                      <dot type="attribute()"/>
                     </fn>
                     <str val="ref"/>
                    </vc>
                   </filter>
                  </copyOf>
                  <choose line="1606">
                   <fn name="exists">
                    <varRef name="refi" slot="3"/>
                   </fn>
                   <att line="1607" name="data-ref" flags="l">
                    <varRef name="refi" slot="3"/>
                   </att>
                  </choose>
                  <att line="1618" name="data-element" flags="l">
                   <lastOf line="1601">
                    <fn name="tokenize">
                     <varRef name="refi" slot="3"/>
                     <str val="/"/>
                     <str val=""/>
                    </fn>
                   </lastOf>
                  </att>
                  <choose line="1619">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="2"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="2"/>
                      <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1620" name="data-constraint" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="2"/>
                       <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1622">
                   <vc op="eq" onEmpty="0" comp="CCC">
                    <fn name="local-name">
                     <dot type="element()"/>
                    </fn>
                    <str val="select"/>
                   </vc>
                   <sequence line="1625">
                    <att name="multiple" flags="l">
                     <str val="true"/>
                    </att>
                    <att name="size" flags="l">
                     <convert from="xs:integer" to="xs:string">
                      <fn name="count">
                       <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                      </fn>
                     </convert>
                    </att>
                   </sequence>
                  </choose>
                  <choose line="1628">
                   <fn name="exists">
                    <varRef name="actions" slot="6"/>
                   </fn>
                   <att line="1629" name="data-action" flags="l">
                    <fn name="string-join">
                     <convert from="xs:anyAtomicType" to="xs:string">
                      <data>
                       <varRef name="myid" slot="7"/>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <applyT line="1634" bSlot="21">
                   <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                   <withParam name="Q{}selectedValue" as="xs:string">
                    <varRef line="1639" name="selectedValue" slot="5"/>
                   </withParam>
                  </applyT>
                 </sequence>
                </elem>
               </sequence>
              </elem>
             </sequence>
            </let>
           </let>
          </sequence>
         </let>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="17" rank="1" minImp="0" slots="7" flags="s" line="2328" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2329">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2330" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2331" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2332" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2333" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2339" name="Q{}myid" slot="5" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}action)"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="5"/>
     </param>
     <let line="2346" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="6" eval="8">
      <ifCall line="2350" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
       <sequence>
        <choose>
         <fn name="exists">
          <varRef name="nodeset" slot="4"/>
         </fn>
         <ifCall line="2351" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@ref"/>
          <cast as="xs:string" emptiable="1">
           <atomSing card="?" diag="2|0||cast as">
            <varRef name="nodeset" slot="4"/>
           </atomSing>
          </cast>
         </ifCall>
        </choose>
        <choose line="2354">
         <fn name="exists">
          <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
         </fn>
         <ifCall line="2355" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@event"/>
          <cast as="xs:string" emptiable="1">
           <atomSing card="?" diag="2|0||cast as">
            <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
           </atomSing>
          </cast>
         </ifCall>
        </choose>
        <choose line="2358">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
         </fn>
         <ifCall line="2359" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@position"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2361">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
         </fn>
         <ifCall line="2362" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@at"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2364">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
         </fn>
         <ifCall line="2365" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@if"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2367">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
         </fn>
         <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@while"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
         </ifCall>
        </choose>
        <treat line="2372" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
         <forEachGroup algorithm="by">
          <axis role="select" name="child" nodeTest="(((((((((((((((element(Q{http://www.w3.org/2002/xforms}setvalue) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
          <fn role="key" name="local-name">
           <dot type="element()"/>
          </fn>
          <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
          <applyT role="content" line="2374" mode="Q{}xforms-action-map" bSlot="28">
           <dot role="select" type="(((((((((((((((element(Q{http://www.w3.org/2002/xforms}setvalue) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))"/>
           <withParam name="Q{}nodeset">
            <varRef line="2375" name="nodeset" slot="4"/>
           </withParam>
          </applyT>
         </forEachGroup>
        </treat>
       </sequence>
       <map size="2">
        <str val="duplicates"/>
        <str val="reject"/>
        <str val="duplicates-error-code"/>
        <str val="XTDE3365"/>
       </map>
      </ifCall>
      <sequence line="2384">
       <message>
        <sequence role="select">
         <valueOf>
          <str val="xforms:action found !!!! XXX, node&#xA;            "/>
         </valueOf>
         <valueOf line="2385">
          <fn name="serialize">
           <dot type="element(Q{http://www.w3.org/2002/xforms}action)"/>
          </fn>
         </valueOf>
         <valueOf>
          <str val=", id= "/>
         </valueOf>
         <valueOf line="2385">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}id" chk="0"/>
          </convert>
         </valueOf>
         <valueOf>
          <str val=",&#xA;            myid = "/>
         </valueOf>
         <valueOf line="2386">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <data>
             <mergeAdj>
              <varRef name="myid" slot="5"/>
             </mergeAdj>
            </data>
           </convert>
           <str val=" "/>
          </fn>
         </valueOf>
         <valueOf>
          <str val=", nodeset="/>
         </valueOf>
         <valueOf line="2387">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <data>
             <mergeAdj>
              <varRef name="nodeset" slot="4"/>
             </mergeAdj>
            </data>
           </convert>
           <str val=" "/>
          </fn>
         </valueOf>
         <valueOf>
          <str val="&#xA;            action xml "/>
         </valueOf>
         <valueOf line="2388">
          <fn name="serialize">
           <varRef name="action-map" slot="6"/>
          </fn>
         </valueOf>
        </sequence>
        <str role="terminate" val="no"/>
        <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
       </message>
       <choose line="2391">
        <and op="and">
         <fn name="exists">
          <varRef name="action-map" slot="6"/>
         </fn>
         <fn name="exists">
          <varRef name="myid" slot="5"/>
         </fn>
        </and>
        <varRef line="2393" name="action-map" slot="6"/>
       </choose>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}show)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="14" rank="1" minImp="0" slots="8" flags="s" line="1738" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1739">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1740" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1741" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1742" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1745" var="context" as="element(Q{http://www.w3.org/2002/xforms}repeat)" slot="4" eval="7">
      <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
      <let line="1748" var="refi" as="xs:string" slot="5" eval="7">
       <choose line="1750">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <cvUntyped line="1757" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <choose>
           <fn name="not">
            <varRef name="nodeset" slot="3"/>
           </fn>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <attVal name="Q{}ref" chk="0"/>
           </fn>
           <true/>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <str val="/"/>
            <attVal name="Q{}ref" chk="0"/>
           </fn>
          </choose>
         </cast>
        </cvUntyped>
        <fn line="1759" name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <cvUntyped line="1766" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <choose>
           <fn name="not">
            <varRef name="nodeset" slot="3"/>
           </fn>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <attVal name="Q{}nodeset" chk="0"/>
           </fn>
           <true/>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <str val="/"/>
            <attVal name="Q{}nodeset" chk="0"/>
           </fn>
          </choose>
         </cast>
        </cvUntyped>
        <true/>
        <str val=""/>
       </choose>
       <choose line="1784">
        <fn name="exists">
         <varRef name="instance1" slot="0"/>
        </fn>
        <sequence line="1785">
         <message>
          <sequence role="select">
           <valueOf>
            <str val="&#xA;                repeat:&#xA;                nodeset = "/>
           </valueOf>
           <fn line="1787" name="serialize">
            <varRef name="nodeset" slot="3"/>
           </fn>
           <valueOf>
            <str val="&#xA;                refi = "/>
           </valueOf>
           <fn line="1788" name="serialize">
            <varRef name="refi" slot="5"/>
           </fn>
           <valueOf>
            <str val="&#xA;                instance1 = "/>
           </valueOf>
           <fn line="1789" name="serialize">
            <varRef name="instance1" slot="0"/>
           </fn>
          </sequence>
          <str role="terminate" val="no"/>
          <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
         </message>
         <let line="1791" var="selectedRepeatVar" as="node()*" slot="6" eval="8">
          <treat line="1793" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|selectedRepeatVar">
           <evaluate dxns="">
            <varRef role="xpath" name="refi" slot="5"/>
            <varRef role="cxt" name="instance1" slot="0"/>
            <str role="sa" val="no"/>
            <map role="wp" size="0"/>
           </evaluate>
          </treat>
          <sequence line="1799">
           <message>
            <choose role="select">
             <fn name="exists">
              <varRef name="selectedRepeatVar" slot="6"/>
             </fn>
             <sequence>
              <valueOf>
               <str val="xforms:repeat ref="/>
              </valueOf>
              <varRef name="refi" slot="5"/>
              <valueOf>
               <str val=", count = "/>
              </valueOf>
              <fn name="count">
               <varRef name="selectedRepeatVar" slot="6"/>
              </fn>
             </sequence>
             <true/>
             <sequence line="1800">
              <valueOf>
               <str val="No repeatfound for ref "/>
              </valueOf>
              <varRef name="refi" slot="5"/>
              <valueOf>
               <str val=" with context "/>
              </valueOf>
              <valueOf>
               <cast as="xs:string" emptiable="0">
                <atomSing diag="2|0||cast as">
                 <varRef name="context" slot="4"/>
                </atomSing>
               </cast>
              </valueOf>
             </sequence>
            </choose>
            <str role="terminate" val="no"/>
            <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
           </message>
           <choose line="1807">
            <fn name="exists">
             <varRef name="selectedRepeatVar" slot="6"/>
            </fn>
            <let line="1817" var="vv:v0" as="element()*" slot="7" eval="4">
             <slash simple="1">
              <varRef name="context" slot="4"/>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <elem line="1808" name="div" nsuri="" namespaces="rdf xhtml js in fn map array ev">
              <sequence>
               <att name="data-repeatable-context" flags="l">
                <varRef name="refi" slot="5"/>
               </att>
               <att name="data-count" flags="l">
                <convert from="xs:integer" to="xs:string">
                 <fn name="count">
                  <varRef name="selectedRepeatVar" slot="6"/>
                 </fn>
                </convert>
               </att>
               <choose line="1809">
                <fn name="exists">
                 <varRef name="refi" slot="5"/>
                </fn>
                <att line="1810" name="data-repeatable-context" flags="l">
                 <varRef name="refi" slot="5"/>
                </att>
               </choose>
               <choose line="1812">
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
                </fn>
                <att line="1813" name="id" flags="l">
                 <convert from="xs:untypedAtomic" to="xs:string">
                  <attVal name="Q{}id" chk="0"/>
                 </convert>
                </att>
               </choose>
               <forEach line="1815">
                <varRef name="selectedRepeatVar" slot="6"/>
                <elem line="1816" name="div" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                 <sequence>
                  <att name="data-repeat-item" flags="l">
                   <str val="true"/>
                  </att>
                  <applyT line="1817" bSlot="29">
                   <varRef role="select" name="vv:v0" slot="7"/>
                   <withParam name="Q{}instance1" as="node()?">
                    <varRef line="1818" name="instance1" slot="0"/>
                   </withParam>
                   <withParam name="Q{}position" as="xs:integer">
                    <fn line="1819" name="position"/>
                   </withParam>
                   <withParam name="Q{}nodeset" as="xs:string">
                    <fn line="1821" name="concat">
                     <varRef name="refi" slot="5"/>
                     <str val="["/>
                     <fn name="position"/>
                     <str val="]"/>
                    </fn>
                   </withParam>
                   <withParam name="Q{}bindings" as="map(xs:string, node())">
                    <varRef line="1822" name="bindings" slot="1"/>
                   </withParam>
                   <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
                    <varRef line="1823" name="submissions" slot="2"/>
                   </withParam>
                  </applyT>
                 </sequence>
                </elem>
               </forEach>
              </sequence>
             </elem>
            </let>
           </choose>
          </sequence>
         </let>
        </sequence>
       </choose>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="9" flags="s" line="2401" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}send)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2402">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2403" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2404" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2405" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2406" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2407" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2413" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <let line="2416" var="nodeseti" as="item()*" slot="7" eval="3">
      <choose>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="nodeset" slot="4"/>
        </data>
        <str val=""/>
       </gc>
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <true/>
       <varRef name="nodeset" slot="4"/>
      </choose>
      <choose line="2418">
       <fn name="not">
        <varRef name="updateMode" slot="5"/>
       </fn>
       <sequence line="2420">
        <message>
         <sequence role="select">
          <valueOf>
           <str val="xforms:setvalue found !!!! XXX, node&#xA;                        "/>
          </valueOf>
          <valueOf line="2421">
           <fn name="serialize">
            <dot type="element()"/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", id= "/>
          </valueOf>
          <valueOf line="2421">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </valueOf>
          <valueOf>
           <str val=",&#xA;                    myid = "/>
          </valueOf>
          <valueOf line="2422">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="myid" slot="6"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <valueOf>
           <str val=", nodeset="/>
          </valueOf>
          <valueOf line="2423">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeseti" slot="7"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </sequence>
         <str role="terminate" val="no"/>
         <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
        </message>
        <let line="2426" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="8" eval="8">
         <ifCall line="2430" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <sequence>
           <choose>
            <fn name="exists">
             <varRef name="nodeset" slot="4"/>
            </fn>
            <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@ref"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <varRef name="nodeset" slot="4"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2434">
            <fn name="exists">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </fn>
            <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@event"/>
             <cast as="xs:string" emptiable="1">
              <atomSing card="?" diag="2|0||cast as">
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </atomSing>
             </cast>
            </ifCall>
           </choose>
           <choose line="2438">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </fn>
            <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@position"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2441">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </fn>
            <ifCall line="2442" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@at"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2444">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </fn>
            <ifCall line="2445" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@if"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </fn>
            </ifCall>
           </choose>
           <choose line="2447">
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </fn>
            <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="@while"/>
             <fn name="string">
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </fn>
            </ifCall>
           </choose>
           <treat line="2451" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
            <forEachGroup algorithm="by">
             <dot role="select" type="element()"/>
             <fn role="key" name="local-name">
              <dot type="element()"/>
             </fn>
             <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
             <applyT role="content" line="2452" mode="Q{}xforms-action-map" bSlot="1">
              <dot role="select" type="element()"/>
              <withParam name="Q{}nodeset">
               <varRef line="2453" name="nodeset" slot="4"/>
              </withParam>
             </applyT>
            </forEachGroup>
           </treat>
          </sequence>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
         <sequence line="2466">
          <message>
           <sequence role="select">
            <valueOf>
             <str val="xforms:setvalue found !!!! XXX, node&#xA;                    "/>
            </valueOf>
            <valueOf line="2467">
             <fn name="serialize">
              <dot type="element()"/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", id= "/>
            </valueOf>
            <valueOf line="2467">
             <convert from="xs:untypedAtomic" to="xs:string">
              <attVal name="Q{}id" chk="0"/>
             </convert>
            </valueOf>
            <valueOf>
             <str val=",&#xA;                    myid = "/>
            </valueOf>
            <valueOf line="2468">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="myid" slot="6"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val=", nodeset="/>
            </valueOf>
            <valueOf line="2469">
             <fn name="string-join">
              <convert from="xs:anyAtomicType" to="xs:string">
               <data>
                <mergeAdj>
                 <varRef name="nodeseti" slot="7"/>
                </mergeAdj>
               </data>
              </convert>
              <str val=" "/>
             </fn>
            </valueOf>
            <valueOf>
             <str val="&#xA;                    action xml "/>
            </valueOf>
            <valueOf line="2470">
             <fn name="serialize">
              <varRef name="action-map" slot="8"/>
              <map size="1">
               <str val="method"/>
               <str val="json"/>
              </map>
             </fn>
            </valueOf>
           </sequence>
           <str role="terminate" val="no"/>
           <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
          </message>
          <varRef line="2494" name="action-map" slot="8"/>
         </sequence>
        </let>
       </sequence>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="1073" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1075" name="html" nsuri="" namespaces="rdf xhtml js in fn map array ev">
     <sequence>
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="1077" name="head" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <copyOf flags="vc">
         <union op="|">
          <slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash>
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="1078" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="1080">
         <union op="|">
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="1082" name="meta" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
          <copyOf flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="1087" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="1090" name="body" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <applyT bSlot="15">
        <slash role="select">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="9" rank="0" minImp="0" slots="4" flags="s" line="1649" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1650">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1651" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1652" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1654" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <copy line="1656" flags="cin">
      <sequence role="content">
       <applyT bSlot="30">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </applyT>
       <applyT line="1657" bSlot="31">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        <withParam name="Q{}instance1" as="node()?">
         <varRef line="1658" name="instance1" slot="0"/>
        </withParam>
        <withParam name="Q{}bindings" as="map(xs:string, node())">
         <varRef line="1659" name="bindings" slot="1"/>
        </withParam>
        <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
         <varRef line="1661" name="submissions" slot="2"/>
        </withParam>
        <withParam name="Q{}nodeset" as="xs:string">
         <varRef line="1662" name="nodeset" slot="3"/>
        </withParam>
       </applyT>
      </sequence>
     </copy>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="10" rank="2" minImp="0" slots="0" flags="s" line="1670" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="text()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;"/>
     <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1670" name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="9" rank="0" minImp="0" slots="4" flags="s" line="1649" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1650">
     <param name="Q{}instance1" slot="0" flags="t" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1651" name="Q{}bindings" slot="1" flags="t" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1652" name="Q{}submissions" slot="2" flags="t" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1654" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <copy line="1656" flags="cin">
      <sequence role="content">
       <applyT bSlot="30">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </applyT>
       <applyT line="1657" bSlot="31">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        <withParam name="Q{}instance1" as="node()?">
         <varRef line="1658" name="instance1" slot="0"/>
        </withParam>
        <withParam name="Q{}bindings" as="map(xs:string, node())">
         <varRef line="1659" name="bindings" slot="1"/>
        </withParam>
        <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
         <varRef line="1661" name="submissions" slot="2"/>
        </withParam>
        <withParam name="Q{}nodeset" as="xs:string">
         <varRef line="1662" name="nodeset" slot="3"/>
        </withParam>
       </applyT>
      </sequence>
     </copy>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <key name="Q{http://saxon.sf.net/}kk101" line="0" binds="" flags="u">
  <p.nodeSet type="element()">
   <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="558" name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
  </p.nodeSet>
  <attVal ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="-1" name="Q{}data-ref" chk="0"/>
 </key>
 <key name="Q{http://saxon.sf.net/}kk102" line="0" binds="" flags="u">
  <p.nodeSet type="element()">
   <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1970" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
  </p.nodeSet>
  <data ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1970">
   <axis name="child" nodeTest="element(Q{}data-action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='data-action';"/>
  </data>
 </key>
 <key name="Q{http://saxon.sf.net/}kk103" line="0" binds="" flags="u">
  <p.nodeSet type="element(Q{}div)">
   <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2073" name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
  </p.nodeSet>
  <attVal ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="-1" name="Q{}data-repeatable-context" chk="0"/>
 </key>
 <output>
  <property name="indent" value="no"/>
  <property name="doctype-system" value="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
  <property name="encoding" value="utf-8"/>
  <property name="doctype-public" value="-//W3C//DTD XHTML 1.0 Transitional//EN"/>
  <property name="omit-xml-declaration" value="no"/>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="30"/>
  <property name="method" value="html"/>
 </output>
 <decimalFormat/>
</package>
<?Σ eb0ede01?>
